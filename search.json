[{"path":"https://soylentorange.github.io/sdarr/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2023 sdarr authors Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"https://soylentorange.github.io/sdarr/articles/excessive_noise_levels.html","id":"preparation-of-synthetic-noisy-test-data","dir":"Articles","previous_headings":"","what":"Preparation of synthetic noisy test data","title":"Excessive noise in test data","text":"synthesize_test_data() used prepare noisy noise-free test record resembling tensile mechanical testing aluminium (Al 6060 T66, values MMPDS Handbook, toe region added). Gaussian noise added synthetic test data setting enob.y_noise enob.x_noise numeric value > 0. , level noise stress-values set effective number 6 bits. Thus assumed standard deviation Gaussian noise 3.31 MPa, calculated : ultimate.y * 2^-enob.x_FS * (2^enob.x_noise - 1)). standard deviation noise calculated synthesized data 3.33 MPa might little different assumed value noise created randomly standard distribution.","code":"# Synthesize a noisy test record resembling Al 6060 T66 # (Values from MMPDS Handbook, with a toe region added) slope.reference <- 68000 offset.reference <- 10 Al_6060_T66.noisy <- synthesize_test_data(   slope = slope.reference, yield.y = 160,   ultimate.y = 215, ultimate.x = 0.091,   offset = offset.reference,    enob.x = 14, enob.x_FS = 14,    enob.y = 12, enob.y_FS = 12, enob.y_noise = 6,   toe.initial.y = 10, toe.max.y = 20,   toe.initial.slope = 13600 )  # Synthesize a noise-free test record resembling Al 6060 T66 # (Values from MMPDS Handbook, with a toe region added) Al_6060_T66.clean <- synthesize_test_data(   slope = slope.reference, yield.y = 160,   ultimate.y = 215, ultimate.x = 0.091,   offset = offset.reference,    enob.x = 14, enob.x_FS = 14,    enob.y = 12, enob.y_FS = 12, enob.y_noise = 0,   toe.initial.y = 10, toe.max.y = 20,   toe.initial.slope = 13600 ) # plot noisy vs. clean test data {   ggplot(data = Al_6060_T66.noisy, aes(x = strain, y = stress,                                       color = \"(noisy) data\")) +     geom_line() +     geom_line(data = Al_6060_T66.clean,                aes(color = \"(noise-free) data\")) +     theme_bw() +     labs(       title = \"Synthetic Data (noisy and clean)\",       x = \"strain\",       y = \"stress (in MPa)\"     ) } %>%   ggplotly(dynamicTicks = TRUE, originalData = FALSE) %>%   config(displaylogo = FALSE, showSendToCloud = FALSE)"},{"path":"https://soylentorange.github.io/sdarr/articles/excessive_noise_levels.html","id":"analysis-of-noisy-data-with-sdarr","dir":"Articles","previous_headings":"","what":"Analysis of noisy data with sdarr","title":"Excessive noise in test data","text":"failing pass tests data quality, sdarr() continue evaluation data record issue warning message results fitting linear regressions might flawed insufficient data quality.","code":"# analyze synthetic data with sdarr()  noisy_result <- Al_6060_T66.noisy %>%   sdarr(strain, stress, showPlots = \"n\", savePlots = T) #> Determination of Slope in the Linear Region of a Test Record: #> SDAR-algorithm #> Warning: Excessive relative noise for y-values (732.9 %) #> Warning: Excessive curvature found in the vicinity of the fitted range! #>   Data Quality Metric: Digital Resolution #>     x #>       Relative x-Resolution:   0.333333333333333 #>       % at this resolution:    0 #>       % in zeroth bin:         100 #>       --> pass #>     y #>       Relative y-Resolution:   21 #>       % at this resolution:    1.8970189701897 #>       % in zeroth bin:         0.2710027100271 #>       --> pass #>   Data Quality Metric: Noise #>     x #>       Relative x-Noise:        1.20663492066826e-14 #>       --> pass #>     y #>       Relative y-Noise:        7.3285471265637 #>       --> fail #>   Fit Quality Metric: Curvature #>     1st Quartile #>       Relative Residual Slope: -0.380721227105097 #>       Number of Points:        86 #>       --> pass #>     4th Quartile #>       Relative Residual Slope: -3.9574886299844 #>       Number of Points:        86 #>       --> fail #>   Fit Quality Metric: Fit Range #>       relative fit range:      0.409110819097678 #>       --> pass #>   Un-normalized fit #>       Final Slope:             65201.4079162069 MPa #>       True Intercept:          12.5243411039926 MPa #>       y-Range:                 22.6977335880647 MPa - 142.25431607309 MPa #> Warning: Quality checks failed: result might be inaccurate!"},{"path":"https://soylentorange.github.io/sdarr/articles/excessive_noise_levels.html","id":"analysis-results-of-noisy-data-with-sdarr","dir":"Articles","previous_headings":"Analysis of noisy data with sdarr","what":"Analysis results of (noisy) data with sdarr","title":"Excessive noise in test data","text":"Next warnings raised sdarr(), reporting message can see deviation slope offset parameters used create synthetic data. slope 2799 MPa (4.1 %) intercept 2.52 MPa (25.2 %).","code":"# plot fit against noisy and clean test data {   # tap the environment of the crated plot-functions   plot.env <- rlang::fn_env(noisy_result$plots$final.fit)    # get data and labels   plot.data <- plot.env$plot.data    plot.main <- plot.env$plot.main   plot.xlab <- plot.env$plot.xlab   plot.ylab <- plot.env$plot.ylab   plot.y.data.max <- plot.data$y.data %>% max()   plot.y.lowerBound <- plot.env$y.lowerBound   plot.y.upperBound <- plot.env$y.upperBound    # get fit ranges   x.lowerBound <- noisy_result$sdar$x.lowerBound   x.upperBound <- noisy_result$sdar$x.upperBound   plot.y.data.max <- plot.data$y.data %>% max(na.rm = TRUE)   plot.y.data.min <- plot.data$y.data %>% min(na.rm = TRUE)   plot.x.data.max <- plot.data$x.data %>% max(na.rm = TRUE)   plot.x.data.min <- plot.data$x.data %>% min(na.rm = TRUE)    # plot the data, noise-free data, final fit and fit-range   ggplot(     data = plot.data %>% dplyr::bind_cols(       data.frame(x.data.clean = Al_6060_T66.clean$strain %>% as.numeric(),                  y.data.clean = Al_6060_T66.clean$stress %>% as.numeric()) %>%         dplyr::filter(dplyr::between(x.data.clean,                                      plot.x.data.min,                                      plot.x.data.max))       ),     aes(x = x.data, y = y.data, color = \"(noisy) data\")   ) +     geom_line() +     geom_line(aes(x = x.data.clean, y = y.data.clean,                    color = \"(noise-free) data\")) +     geom_line(       data = plot.data %>%         dplyr::filter(y.fit <= plot.y.data.max),       aes(x = x.data, y = y.fit, color = \"fit (sdarr)\")     ) +     geom_hline(aes(color = \"fit range\",                     yintercept = plot.y.lowerBound),                linetype = \"dashed\",                show.legend = TRUE) +     geom_hline(aes(color = \"fit range\",                     yintercept = plot.y.upperBound),                linetype = \"dashed\",                show.legend = TRUE) +     theme_bw() +     labs(       title = \"Final fit of (noisy) data\",       x = plot.xlab,       y = plot.ylab     ) } %>%   ggplotly(dynamicTicks = TRUE, originalData = FALSE) %>%   config(displaylogo = FALSE, showSendToCloud = FALSE)"},{"path":"https://soylentorange.github.io/sdarr/articles/excessive_noise_levels.html","id":"de-noising-in-sdarr-lazy","dir":"Articles","previous_headings":"","what":"De-noising in sdarr.lazy","title":"Excessive noise in test data","text":"second modification original SDAR-algorithm de-noising test record within sdarr.lazy() case data quality checks failed. quasi-static component noisy test record identified Variational Mode Decomposition (see: Dragomiretskiy & Zosso (2014)) using VMDecomp-package. Finding range final fitting random sub-sampling approach conducted de-noised data. final fit calculated original (noisy) data. Still, warning messages given careful inspection results advisable.","code":"# analyze noisy synthetic data using sdarr.lazy() noisy_result.lazy <- Al_6060_T66.noisy %>%   sdarr.lazy(strain, stress, showPlots = \"n\", savePlots = T,              enforce_subsampling = TRUE, cutoff_probability = 0.9) #> Determination of Slope in the Linear Region of a Test Record: #>   Data quality checks of original test record failed! #>   Proceeding with de-noised data... #>   lazy algorithm requires more fits than standard SDAR-algorithm:   #>     123765 vs. 29646 fits. #>   Anyways, random sub-sampling will be used... #> Random sub-sampling modification of the SDAR-algorithm #>   Random sub-sampling information (after de-noising was applied): #>       276 points of 337 points in the normalized range were used. #>       54 % of sub-sampled normalized ranges passed the data quality checks. #>       42 % of linear regressions passed the fit quality checks. #>       32 % of linear regressions passed all quality checks. #>  #> Warning: Excessive relative noise for y-values (732.9 %) #> Warning: Excessive curvature found in the vicinity of the fitted range! #>   Data Quality Metric: Digital Resolution #>     x #>       Relative x-Resolution:   0.333333333333333 #>       % at this resolution:    0 #>       % in zeroth bin:         100 #>       --> pass #>     y #>       Relative y-Resolution:   21 #>       % at this resolution:    1.8970189701897 #>       % in zeroth bin:         0.2710027100271 #>       --> pass #>   Data Quality Metric: Noise #>     x #>       Relative x-Noise:        1.20663492066826e-14 #>       --> pass #>     y #>       Relative y-Noise:        7.3285471265637 #>       --> fail #>   Fit Quality Metric: Curvature #>     1st Quartile #>       Relative Residual Slope: 4.38908302729688 #>       Number of Points:        55 #>       --> fail #>     4th Quartile #>       Relative Residual Slope: 1.69804085375796 #>       Number of Points:        55 #>       --> fail #>   Fit Quality Metric: Fit Range #>       relative fit range:      0.556946929039952 #>       --> pass #>   Un-normalized fit #>       Final Slope:             67827.1976613974 MPa #>       True Intercept:          10.3438499968763 MPa #>       y-Range:                 28.4144621298774 MPa - 112.736208121615 MPa #> Warning: Quality checks failed: result might be inaccurate!"},{"path":"https://soylentorange.github.io/sdarr/articles/excessive_noise_levels.html","id":"analysis-results-of-noisy-data-with-sdarr-lazy","dir":"Articles","previous_headings":"De-noising in sdarr.lazy","what":"Analysis results of (noisy) data with sdarr.lazy","title":"Excessive noise in test data","text":"Next warnings raised sdarr.lazy(), reporting message can see (little less) deviation slope offset parameters used create synthetic data. slope 173 MPa (0.3 %) intercept 0.34 MPa (3.4 %).","code":"# plot fit against noisy, de-noised and clean test data {   # tap the environment of the crated plot-functions   plot.fit.env <- rlang::fn_env(noisy_result.lazy$plots$final.fit)   plot.otr.denoised.env <- rlang::fn_env(noisy_result.lazy$plots$otr.denoised)    # get data and fit ranges   plot.fit.data <- plot.fit.env$plot.data    plot.fit.y.data.max <- plot.fit.data$y.data %>% max()   plot.fit.y.lowerBound <- plot.fit.env$y.lowerBound   plot.fit.y.upperBound <- plot.fit.env$y.upperBound   plot.fit.y.data.max <- plot.fit.data$y.data %>% max(na.rm = TRUE)   plot.fit.y.data.min <- plot.fit.data$y.data %>% min(na.rm = TRUE)   plot.fit.x.data.max <- plot.fit.data$x.data %>% max(na.rm = TRUE)   plot.fit.x.data.min <- plot.fit.data$x.data %>% min(na.rm = TRUE)   plot.otr.denoised.data <- plot.otr.denoised.env$plot.data    # plot the data, noise-free data, final fit and fit-range   ggplot(     data = plot.data %>% dplyr::bind_cols(       data.frame(x.data.clean = Al_6060_T66.clean$strain %>% as.numeric(),                  y.data.clean = Al_6060_T66.clean$stress %>% as.numeric()) %>%         dplyr::filter(dplyr::between(x.data.clean,                                      plot.fit.x.data.min,                                      plot.fit.x.data.max))       ),     aes(x = x.data, y = y.data, color = \"(noisy) data\")   ) +     geom_line() +     geom_line(data = plot.otr.denoised.data %>%                 dplyr::filter(dplyr::between(x.data.denoised,                                              plot.fit.x.data.min,                                              plot.fit.x.data.max)),               aes(x = x.data.denoised, y = y.data.denoised,                    color = \"(de-noised ) data\")) +     geom_line(aes(x = x.data.clean, y = y.data.clean,                    color = \"(noise-free) data\")) +     geom_line(       data = plot.fit.data %>%         dplyr::filter(y.fit <= plot.fit.y.data.max),       aes(x = x.data, y = y.fit, color = \"fit (sdarr)\")     ) +     geom_hline(aes(color = \"fit range\",                     yintercept = plot.fit.y.lowerBound),                linetype = \"dashed\",                show.legend = TRUE) +     geom_hline(aes(color = \"fit range\",                     yintercept = plot.fit.y.upperBound),                linetype = \"dashed\",                show.legend = TRUE) +     theme_bw() +     labs(       title = \"Final fit of (noisy) data\",       x = plot.xlab,       y = plot.ylab     ) } %>%   ggplotly(dynamicTicks = TRUE, originalData = FALSE) %>%   config(displaylogo = FALSE, showSendToCloud = FALSE)"},{"path":"https://soylentorange.github.io/sdarr/articles/excessive_noise_levels.html","id":"summary","dir":"Articles","previous_headings":"","what":"Summary","title":"Excessive noise in test data","text":"de-noising feature sdarr.lazy() can improve outcome analysis quite bit. example provided, deviation final slope reduced 4.1 % using sdarr() 0.3 % using sdarr.lazy(). Still, noise levels considered “excessive” standard, might want re-consider testing approach…","code":""},{"path":"https://soylentorange.github.io/sdarr/articles/excessive_noise_levels.html","id":"final-remark","dir":"Articles","previous_headings":"","what":"Final Remark","title":"Excessive noise in test data","text":"Even though functions within package tested, see remark LICENSE… SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"https://soylentorange.github.io/sdarr/articles/validation.html","id":"validation-of-sdarr-and-sdarr-lazy","dir":"Articles","previous_headings":"","what":"Validation of sdarr and sdarr.lazy","title":"Validation against Reference Data Set","text":"Though exhaustive validation conducted, Reference Data Set E3076-DS1(2018) File 01 mentioned ASTM E3076-18 …available download ASTM https://www.astm.org/ COMMITTEE/E08.htm, heading, Additional Information… used check results implementation. Reference Data Set E3076-DS1(2018) File 01 also analyzed benchmark NIST Technical Note 2050 E. Lucon minor differences expected results listed standard.","code":""},{"path":"https://soylentorange.github.io/sdarr/articles/validation.html","id":"reference-data-set","dir":"Articles","previous_headings":"Validation of sdarr and sdarr.lazy","what":"Reference Data Set","title":"Validation against Reference Data Set","text":"plot Reference Data Set (downloading, unpacking labelling) given .","code":"# plot of the data E3076_DS1_2018 %>%   {     ggplot(data = ., aes(       x = extensometer, y = force,       color = \"E3076_DS1_2018\"     )) +       geom_line() +       theme_bw() +       labs(         title = \"Plot of the Reference Data Set\",         x = \"extensometer (in mm)\",         y = \"force (in kN)\"       )   } %>%   ggplotly(dynamicTicks = TRUE, originalData = FALSE) %>%   config(displaylogo = FALSE, showSendToCloud = FALSE)"},{"path":"https://soylentorange.github.io/sdarr/articles/validation.html","id":"standard-algorithm-sdarr","dir":"Articles","previous_headings":"Validation of sdarr and sdarr.lazy","what":"Standard algorithm (sdarr)","title":"Validation against Reference Data Set","text":"","code":"# Run the algorithm sdarr.results <- E3076_DS1_2018 %>%   sdarr(extensometer, force,     showPlots = \"n\",     savePlots = TRUE   ) #> Determination of Slope in the Linear Region of a Test Record: #> SDAR-algorithm #>   Data Quality Metric: Digital Resolution #>     x #>       Relative x-Resolution:   0.666666666666667 #>       % at this resolution:    15.5963302752294 #>       % in zeroth bin:         6.42201834862385 #>       --> pass #>     y #>       Relative y-Resolution:   0.333333333333333 #>       % at this resolution:    4.58715596330275 #>       % in zeroth bin:         90.8256880733945 #>       --> pass #>   Data Quality Metric: Noise #>     x #>       Relative x-Noise:        0.325118923848699 #>       --> pass #>     y #>       Relative y-Noise:        0.14437695453926 #>       --> pass #>   Fit Quality Metric: Curvature #>     1st Quartile #>       Relative Residual Slope: 0.366359693308662 #>       Number of Points:        25 #>       --> pass #>     4th Quartile #>       Relative Residual Slope: 0.205348930211829 #>       Number of Points:        25 #>       --> pass #>   Fit Quality Metric: Fit Range #>       relative fit range:      0.925620787205303 #>       --> pass #>   Un-normalized fit #>       Final Slope:             328.108508087124 kN/mm #>       True Intercept:          -0.0376051859940873 kN #>       y-Range:                 5.456632 kN - 14.35957 kN  # show the plot of the final fit sdarr.results$plots$final.fit %>%   {     # tap the environment of the crated plot-function     plot.env <- rlang::fn_env(.)      # get data and labels     plot.data <- plot.env$plot.data     plot.main <- plot.env$plot.main     plot.xlab <- plot.env$plot.xlab     plot.ylab <- plot.env$plot.ylab     y.data.max <- plot.data$y.data %>% max()      # create the ggplot2     plot.data %>% ggplot(aes(       x = x.data,       y = y.data,       color = \"E3076_DS1_2018\"     )) +       geom_line() +       geom_line(         data = plot.data %>%           dplyr::filter(y.fit <= y.data.max),         aes(x = x.data, y = y.fit, color = \"fit (sdarr)\")       ) +       theme_bw() +       labs(         title = plot.main,         x = plot.xlab,         y = plot.ylab       )   } %>%   ggplotly(dynamicTicks = TRUE, originalData = FALSE) %>%   config(displaylogo = FALSE, showSendToCloud = FALSE)"},{"path":"https://soylentorange.github.io/sdarr/articles/validation.html","id":"validation-result","dir":"Articles","previous_headings":"Validation of sdarr and sdarr.lazy > Standard algorithm (sdarr)","what":"Validation Result","title":"Validation against Reference Data Set","text":"results analysis using sdarr() practically identical results given ASTM E3076-18 perfectly match results NIST Technical Note 2050 E. Lucon (except omitting rounding sdarr). stated NIST Technical Note 2050 E. Lucon …small discrepancies likely attributable rounding errors….","code":""},{"path":"https://soylentorange.github.io/sdarr/articles/validation.html","id":"random-sub-sampling-modification-of-the-sdar-algorithm-sdarr-lazy","dir":"Articles","previous_headings":"Validation of sdarr and sdarr.lazy","what":"Random sub-sampling modification of the SDAR-algorithm (sdarr.lazy)","title":"Validation against Reference Data Set","text":"","code":"# Run the algorithm (after setting a random seed) set.seed(50041180) sdarr.lazy.results <- E3076_DS1_2018 %>%   sdarr.lazy(extensometer, force,     enforce_subsampling = TRUE,     showPlots = \"n\", savePlots = TRUE   ) #> Determination of Slope in the Linear Region of a Test Record: #>   lazy algorithm requires more fits than standard SDAR-algorithm:   #>     69305 vs. 15753 fits. #>   Anyways, random sub-sampling will be used... #> Random sub-sampling modification of the SDAR-algorithm #>   Random sub-sampling information: #>       206 points of 220 points in the normalized range were used. #>       100 % of sub-sampled normalized ranges passed the data quality checks. #>       100 % of linear regressions passed the fit quality checks. #>       100 % of linear regressions passed all quality checks. #>  #>   Data Quality Metric: Digital Resolution #>     x #>       Relative x-Resolution:   0.666666666666667 #>       % at this resolution:    15.5963302752294 #>       % in zeroth bin:         6.42201834862385 #>       --> pass #>     y #>       Relative y-Resolution:   0.333333333333333 #>       % at this resolution:    4.58715596330275 #>       % in zeroth bin:         90.8256880733945 #>       --> pass #>   Data Quality Metric: Noise #>     x #>       Relative x-Noise:        0.325118923848699 #>       --> pass #>     y #>       Relative y-Noise:        0.14437695453926 #>       --> pass #>   Fit Quality Metric: Curvature #>     1st Quartile #>       Relative Residual Slope: 0.474946099177335 #>       Number of Points:        26 #>       --> pass #>     4th Quartile #>       Relative Residual Slope: -0.143104041163893 #>       Number of Points:        24 #>       --> pass #>   Fit Quality Metric: Fit Range #>       relative fit range:      0.886765200623262 #>       --> pass #>   Un-normalized fit #>       Final Slope:             327.89550545235 kN/mm #>       True Intercept:          -0.0334704292207039 kN #>       y-Range:                 5.3646 kN - 14.65764 kN  # show the plot of the final fit sdarr.lazy.results$plots$final.fit %>%   {     # tap the environment of the crated plot-function     plot.env <- rlang::fn_env(.)      # get data and labels     plot.data <- plot.env$plot.data     plot.main <- plot.env$plot.main     plot.xlab <- plot.env$plot.xlab     plot.ylab <- plot.env$plot.ylab     y.data.max <- plot.data$y.data %>% max()      # create the ggplot2     plot.data %>%       ggplot(aes(x = x.data, y = y.data, color = \"E3076_DS1_2018\")) +       geom_line() +       geom_line(         data = plot.data %>%           dplyr::filter(y.fit <= y.data.max),         aes(           x = x.data, y = y.fit,           color = \"fit (sdarr.lazy)\"         )       ) +       theme_bw() +       labs(         title = plot.main,         x = plot.xlab,         y = plot.ylab       )   } %>%   ggplotly(dynamicTicks = TRUE, originalData = FALSE) %>%   config(displaylogo = FALSE, showSendToCloud = FALSE)"},{"path":"https://soylentorange.github.io/sdarr/articles/validation.html","id":"validation-result-1","dir":"Articles","previous_headings":"Validation of sdarr and sdarr.lazy > Random sub-sampling modification of the SDAR-algorithm (sdarr.lazy)","what":"Validation Result","title":"Validation against Reference Data Set","text":"first glimpse, results analysis using random sub-sampling variant SDAR-algorithm sdarr.lazy() identical results given ASTM E3076-18 results NIST Technical Note 2050 E. Lucon (except omitting rounding). However, considering 95% confidence intervals (additionally given result sdarr() sdarr.lazy()) obtained final fitting standard SDAR-algorithm, results lazy variant well within 95%-CI standard variant. minor difference y-range final fits resulting slightly different final results. Comparing regression curves sdarr.lazy() sdarr() mechanical data, see practically difference (zoom …lot… see difference).","code":"# plot fit (with 95% CI) and lazy fit against original test record {   # tap the environment of the crated plot-functions   plot.env <- rlang::fn_env(sdarr.results$plots$final.fit)   plot.env.lazy <- rlang::fn_env(sdarr.lazy.results$plots$final.fit)    # get data and labels   plot.data <- plot.env$plot.data %>%     dplyr::select(x.data, y.data)   plot.main <- plot.env$plot.main   plot.xlab <- plot.env$plot.xlab   plot.ylab <- plot.env$plot.ylab    # get fit ranges   x.lowerBound <- sdarr.results$sdar$x.lowerBound   x.upperBound <- sdarr.results$sdar$x.upperBound   x.lowerBound.lazy <- sdarr.lazy.results$sdar$x.lowerBound   x.upperBound.lazy <- sdarr.lazy.results$sdar$x.upperBound    # re-fit for plotting   y.data.prediction <- plot.data %>%     dplyr::filter(dplyr::between(x.data, x.lowerBound, x.upperBound)) %>%     {       data <- .       lm(y.data ~ x.data, data = data) %>%         predict(           newdata = dplyr::bind_rows(             data.frame(x.data = 0),             plot.data %>% dplyr::select(x.data)           ),           interval = \"confidence\"         )     }    y.data.prediction.lazy <- plot.data %>%     dplyr::filter(dplyr::between(       x.data,       x.lowerBound.lazy,       x.upperBound.lazy     )) %>%     {       data <- .       lm(y.data ~ x.data, data = data) %>%         predict(newdata = dplyr::bind_rows(           data.frame(x.data = 0),           plot.data %>%             dplyr::select(x.data)         )) %>%         as.data.frame() %>%         set_names(\"fit.lazy\")     }    # add an empty data point at 0 extension to see the difference in intercept   plot.data <- data.frame(x.data = 0, y.data = NA) %>%     dplyr::bind_rows(plot.data) %>%     dplyr::bind_cols(       y.data.prediction,       y.data.prediction.lazy     )    y.data.max <- plot.data$y.data %>% max(na.rm = TRUE)    ggplot(     data = plot.data,     aes(x = x.data, y = y.data, color = \"E3076_DS1_2018\")   ) +     geom_line() +     geom_line(       data = plot.data %>%         dplyr::filter(dplyr::between(           x.data,           x.lowerBound,           x.upperBound         )),       aes(         x = x.data, y = y.data,         color = \"fit-range (sdarr)\"       ),       linewidth = 1.5, alpha = 0.5     ) +     geom_line(       data = plot.data %>%         dplyr::filter(dplyr::between(           x.data,           x.lowerBound.lazy,           x.upperBound.lazy         )),       aes(         x = x.data, y = y.data,         color = \"fit-range (sdarr.lazy)\"       ),       linewidth = 1.5, alpha = 0.5     ) +     geom_line(       data = plot.data %>%         dplyr::filter(fit <= y.data.max),       aes(x = x.data, y = fit, color = \"fit (sdarr)\")     ) +     geom_ribbon(       data = plot.data %>%         dplyr::filter(fit <= y.data.max),       aes(         x = x.data, y = NULL, ymin = lwr, ymax = upr,         color = \"fit (sdarr)\"       ),       linewidth = 0, alpha = 0.25     ) +     geom_line(       data = plot.data %>%         dplyr::filter(fit.lazy <= y.data.max),       aes(x = x.data, y = fit.lazy, color = \"fit (sdarr.lazy)\")     ) +     theme_bw() +     labs(       title = \"Final fit (with 95% CI) vs. final lazy fit\",       x = plot.xlab,       y = plot.ylab     ) } %>%   ggplotly(dynamicTicks = TRUE, originalData = FALSE) %>%   config(displaylogo = FALSE, showSendToCloud = FALSE)"},{"path":"https://soylentorange.github.io/sdarr/articles/validation.html","id":"conclusions","dir":"Articles","previous_headings":"Validation of sdarr and sdarr.lazy","what":"Conclusions","title":"Validation against Reference Data Set","text":"Even though benchmarking real validation, results sdarr() practically identical results listed ASTM E3076-18 NIST Technical Note 2050 E. Lucon. Considering 95% confidence intervals fitting results, seems true random sub-sampling modification used sdarr.lazy().","code":""},{"path":"https://soylentorange.github.io/sdarr/articles/validation.html","id":"final-remark","dir":"Articles","previous_headings":"Validation of sdarr and sdarr.lazy","what":"Final Remark","title":"Validation against Reference Data Set","text":"Even though functions within package tested, see remark LICENSE… SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"https://soylentorange.github.io/sdarr/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Robert Wendlandt. Author, maintainer. UKSH. Copyright holder, funder.","code":""},{"path":"https://soylentorange.github.io/sdarr/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Wendlandt R (2023). sdarr: Slope Determination Analysis Residuals. R package version 0.4.5, https://soylentorange.github.io/sdarr/.","code":"@Manual{,   title = {sdarr: Slope Determination by Analysis of Residuals},   author = {Robert Wendlandt},   year = {2023},   note = {R package version 0.4.5},   url = {https://soylentorange.github.io/sdarr/}, }"},{"path":"https://soylentorange.github.io/sdarr/index.html","id":"sdarr","dir":"","previous_headings":"","what":"Slope Determination by Analysis of Residuals","title":"Slope Determination by Analysis of Residuals","text":"sdarr-package provides R implementation SDAR algorithm Slope Determination Analysis Residuals standardized ASTM E3076-18. allows automated objective linear-fitting mechanical test-data. See detailed description algorithm NIST Technical Note 2050 E. Lucon Graham & Adler (2011). SDAR-algorithm, implemented sdarr(), heavily uses linear regressions, faster version sdarr.lazy() implemented, finds optimum region (one) final linear regression random sub-sampling within normalized range test-data.","code":""},{"path":"https://soylentorange.github.io/sdarr/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Slope Determination by Analysis of Residuals","text":"can install development version sdarr GitHub :","code":"# install.packages(\"devtools\") devtools::install_github(\"soylentOrange/sdarr\")"},{"path":[]},{"path":"https://soylentorange.github.io/sdarr/index.html","id":"standard-sdar-algorithm","dir":"","previous_headings":"Examples","what":"Standard SDAR-algorithm","title":"Slope Determination by Analysis of Residuals","text":"basic example using sdarr() synthetic data set, based properties aluminium (Al 6060 T66) given Metallic Material Properties Development Standardization (MMPDS) Handbook. toe-region non-zero intercept added make test data less boring. sdarr() analyzes data give small report message. confirm Young’s-modulus 68 GPa intercept 10 MPa. make use multi-core processing, configure furrr use multisession strategy.","code":"library(sdarr)  # setup multisession calculations with a maximum of 8 cores # (or however many cores are available...) future::plan(future::multisession,   workers = min(c(parallelly::availableCores(), 8)) )  # Synthesize a test record resembling Al 6060 T66 # (Values from MMPDS Handbook, with a toe region added) Al_6060_T66 <- synthesize_test_data(   slope = 68000, yield.y = 160,   ultimate.y = 215, ultimate.x = 0.091,   offset = 10,   toe.initial.y = 3, toe.max.y = 15,   toe.initial.slope = 13600 )  # Analyze the test record Al_6060_T66.result <- sdarr(Al_6060_T66,   x = strain, y = stress,   verbose = \"r\", showPlots = \"r\", savePlots = TRUE ) #> Determination of Slope in the Linear Region of a Test Record: #> SDAR-algorithm #>   Data Quality Metric: Digital Resolution #>     x #>       Relative x-Resolution:   0.333333333333333 #>       % at this resolution:    0 #>       % in zeroth bin:         100 #>       --> pass #>     y #>       Relative y-Resolution:   0.333333333333333 #>       % at this resolution:    1.19402985074627 #>       % in zeroth bin:         98.8059701492537 #>       --> pass #>   Data Quality Metric: Noise #>     x #>       Relative x-Noise:        1.12835262887974e-14 #>       --> pass #>     y #>       Relative y-Noise:        0.0628385403382046 #>       --> pass #>   Fit Quality Metric: Curvature #>     1st Quartile #>       Relative Residual Slope: 0.00112596960003188 #>       Number of Points:        40 #>       --> pass #>     4th Quartile #>       Relative Residual Slope: -0.00682689398113825 #>       Number of Points:        40 #>       --> pass #>   Fit Quality Metric: Fit Range #>       relative fit range:      0.800879700901693 #>       --> pass #>   Un-normalized fit #>       Final Slope:             67999.5684247684 MPa #>       True Intercept:          10.0022190872361 MPa #>       y-Range:                 24.7366333007812 MPa - 84.4049072265625 MPa"},{"path":"https://soylentorange.github.io/sdarr/index.html","id":"random-sub-sampling-modification-of-the-sdar-algorithm","dir":"","previous_headings":"Examples","what":"Random sub-sampling modification of the SDAR-algorithm","title":"Slope Determination by Analysis of Residuals","text":"basic example sdarr.lazy(), lazy variant sdarr-function synthetic data set, based properties aluminium (Al 6060 T66) given Metallic Material Properties Development Standardization (MMPDS) Handbook. toe-region non-zero intercept added make test data less boring (see ). sdarr.lazy() analyzes data optimum size fitting region via random sub-sampling. give small report message finding optimum fit. confirm Young’s-modulus 68 GPa intercept 10 MPa. data set rather short, enforce random sub-sampling setting enforce_subsampling = TRUE. make use multi-core processing, configure furrr use multisession strategy (see ).","code":"# set a random seed set.seed(50041180)  # Analyze the test record # (using a relaxed cutoff_probability for the noise-free synthetic data) Al_6060_T66.result.lazy <- sdarr.lazy(Al_6060_T66,   x = strain, y = stress,   cutoff_probability = 0.8,   enforce_subsampling = TRUE,   verbose = \"r\", showPlots = \"n\" ) #> Determination of Slope in the Linear Region of a Test Record: #>   lazy algorithm requires more fits than standard SDAR-algorithm:   #>     99500 vs. 36856 fits. #>   Anyways, random sub-sampling will be used... #> Random sub-sampling modification of the SDAR-algorithm #>   Random sub-sampling information: #>       247 points of 337 points in the normalized range were used. #>       20 % of sub-sampled normalized ranges passed the data quality checks. #>       100 % of linear regressions passed the fit quality checks. #>       20 % of linear regressions passed all quality checks. #>  #>   Data Quality Metric: Digital Resolution #>     x #>       Relative x-Resolution:   0.333333333333333 #>       % at this resolution:    0 #>       % in zeroth bin:         100 #>       --> pass #>     y #>       Relative y-Resolution:   0.333333333333333 #>       % at this resolution:    1.19402985074627 #>       % in zeroth bin:         98.8059701492537 #>       --> pass #>   Data Quality Metric: Noise #>     x #>       Relative x-Noise:        1.12835262887974e-14 #>       --> pass #>     y #>       Relative y-Noise:        0.0628385403382046 #>       --> pass #>   Fit Quality Metric: Curvature #>     1st Quartile #>       Relative Residual Slope: 0.00277455072182705 #>       Number of Points:        40 #>       --> pass #>     4th Quartile #>       Relative Residual Slope: -0.00745994845842898 #>       Number of Points:        40 #>       --> pass #>   Fit Quality Metric: Fit Range #>       relative fit range:      0.806020362992475 #>       --> pass #>   Un-normalized fit #>       Final Slope:             67999.060977753 MPa #>       True Intercept:          10.0024898483829 MPa #>       y-Range:                 25.484619140625 MPa - 84.7723388671875 MPa"},{"path":"https://soylentorange.github.io/sdarr/index.html","id":"plot-functions","dir":"","previous_headings":"Examples","what":"plot functions","title":"Slope Determination by Analysis of Residuals","text":"sdarr() sdarr.lazy() create diagnostic plots throughout calculations, shown requested (.e. set showPlots = \"). plot drawn later, can call provided plot-functions results, set savePlots = TRUE. plot-functions crated, can easily tap environment convert e.g. ggplot2-graphic.","code":"# show plot of final fit using the plot function from the result (see above) Al_6060_T66.result$plots$final.fit() # satisfy pipe addiction... library(magrittr) # make nice and shiny graphics withh ggplot2... library(ggplot2)   # plot the final fit using ggplot2 Al_6060_T66.result %>% {      # tap the environment of the crated plot-function   plot.env <- rlang::fn_env(.$plots$final.fit)    # get data and labels   plot.data <- plot.env$plot.data   plot.main <- plot.env$plot.main   plot.xlab <- plot.env$plot.xlab   plot.ylab <- plot.env$plot.ylab   plot.y.data.max <- plot.data$y.data %>% max()   plot.y.lowerBound <- plot.env$y.lowerBound   plot.y.upperBound <- plot.env$y.upperBound    # create the ggplot2   plot.data %>% ggplot(aes(x = x.data, y = y.data, color = \"Al_6060_T66\")) +     geom_line() +     geom_line(       data = plot.data %>%         dplyr::filter(y.fit <= plot.y.data.max),       aes(x = x.data, y = y.fit, color = \"fit (sdarr)\")     ) +     geom_hline(aes(color = \"fit range\",                     yintercept = plot.y.lowerBound),                linetype = \"dashed\",                show.legend = TRUE) +     geom_hline(aes(color = \"fit range\",                     yintercept = plot.y.upperBound),                linetype = \"dashed\",                show.legend = TRUE) +     theme_bw() +     labs(       title = plot.main,       x = plot.xlab,       y = plot.ylab,       caption = paste0(\"Result of the SDAR-algorithm:\\n\\nFinal Slope: \",                        round(.$sdar$finalSlope/1000, 1), \" GPa\\nTrue Offset: \",                        round(.$sdar$trueIntercept, 1), \" MPa\\n\\nFit Range: \",                        round(plot.y.lowerBound, 1), \" MPa - \",                        round(plot.y.upperBound, 1), \" MPa\")     ) }"},{"path":"https://soylentorange.github.io/sdarr/index.html","id":"acknowledgements","dir":"","previous_headings":"","what":"Acknowledgements","title":"Slope Determination by Analysis of Residuals","text":"sdarr-package created analysis mechanical test data project LOBio, funded German ministry education research (BMBF) grant number 13XP5174C.","code":""},{"path":"https://soylentorange.github.io/sdarr/reference/pipe.html","id":null,"dir":"Reference","previous_headings":"","what":"Pipe operator — %>%","title":"Pipe operator — %>%","text":"See magrittr::%>% details.","code":""},{"path":"https://soylentorange.github.io/sdarr/reference/pipe.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Pipe operator — %>%","text":"","code":"lhs %>% rhs"},{"path":"https://soylentorange.github.io/sdarr/reference/pipe.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Pipe operator — %>%","text":"lhs value magrittr placeholder. rhs function call using magrittr semantics.","code":""},{"path":"https://soylentorange.github.io/sdarr/reference/pipe.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Pipe operator — %>%","text":"result calling rhs(lhs).","code":""},{"path":"https://soylentorange.github.io/sdarr/reference/sdarr-package.html","id":null,"dir":"Reference","previous_headings":"","what":"sdarr: Slope Determination by Analysis of Residuals — sdarr-package","title":"sdarr: Slope Determination by Analysis of Residuals — sdarr-package","text":"Slope Determination Analysis Residuals (SDAR) automated objective linear-fitting mechanical test-data (see: standard ASTM E3076-18 doi:10.1520/E3076-18  detailed description E. Lucon (2019) doi:10.6028/NIST.TN.2050 ). SDAR-algorithm heavily uses linear regressions, faster version additionally available find optimum region (one) final linear regression random sub-sampling within normalized range test-data.","code":""},{"path":[]},{"path":"https://soylentorange.github.io/sdarr/reference/sdarr-package.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"sdarr: Slope Determination by Analysis of Residuals — sdarr-package","text":"Maintainer: Robert Wendlandt robert.wendlandt@uksh.de (ORCID) contributors: UKSH [copyright holder, funder]","code":""},{"path":"https://soylentorange.github.io/sdarr/reference/sdarr.html","id":null,"dir":"Reference","previous_headings":"","what":"SDAR-algorithm — sdarr","title":"SDAR-algorithm — sdarr","text":"Run SDAR algorithm standardized ASTM E3076-18. use numerous linear regressions (.lm.fit() stats-package) can painfully slow test data high resolution.","code":""},{"path":"https://soylentorange.github.io/sdarr/reference/sdarr.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"SDAR-algorithm — sdarr","text":"","code":"sdarr(data, x, y, verbose = \"report\", showPlots = \"report\", savePlots = FALSE)"},{"path":"https://soylentorange.github.io/sdarr/reference/sdarr.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"SDAR-algorithm — sdarr","text":"data Data record analyze. Labels data columns used units. x, y <tidy-select> Columns x y within data. verbose, showPlots Give informational messages plots computation. Defaults \"report\" show report plot final fit. Set \"\" also give messages individual steps. Set \"none\" quiet. Can abbreviated. savePlots Set TRUE get plot-functions result later use.","code":""},{"path":"https://soylentorange.github.io/sdarr/reference/sdarr.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"SDAR-algorithm — sdarr","text":"list containing data-frame results final fit, lists quality- fit-metrics, list containing crated plot-functions (savePlots = TRUE).","code":""},{"path":"https://soylentorange.github.io/sdarr/reference/sdarr.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"SDAR-algorithm — sdarr","text":"function can use parallel processing via furrr-package. use feature, set plan default sequential strategy beforehand.","code":""},{"path":"https://soylentorange.github.io/sdarr/reference/sdarr.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"SDAR-algorithm — sdarr","text":"Lucon, E. (2019). Use validation slope determination analysis residuals (SDAR) algorithm (NIST TN 2050; p. NIST TN 2050). National Institute Standards Technology. https://doi.org/10.6028/NIST.TN.2050 Standard Practice Determination Slope Linear Region Test Record (ASTM E3076-18). (2018). https://doi.org/10.1520/E3076-18 Graham, S., & Adler, M. (2011). Determining Slope Quality Fit Linear Part Test Record. Journal Testing Evaluation - J TEST EVAL, 39. https://doi.org/10.1520/JTE103038","code":""},{"path":[]},{"path":"https://soylentorange.github.io/sdarr/reference/sdarr.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"SDAR-algorithm — sdarr","text":"","code":"# Synthesize a test record resembling Al 6060 T66 # (Values according to Metallic Material Properties # Development and Standardization (MMPDS) Handbook). # Explicitly set names to \"strain\" and \"stress\", # set effective number of bits in the x-data to 12 # to limit the number of data points.  Al_6060_T66 <- synthesize_test_data(   slope = 68000,   yield.y = 160,   ultimate.y = 215,   ultimate.x = 0.091,   x.name = \"strain\",   y.name = \"stress\",   enob.x = 12 )   # use sdarr() to analyze the synthetic test record # will print a report and give a plot of the final fit # \\donttest{ result <- sdarr(Al_6060_T66, strain, stress) #> Determination of Slope in the Linear Region of a Test Record: #> SDAR-algorithm #>   Data Quality Metric: Digital Resolution #>     x #>       Relative x-Resolution:   0.333333333333333 #>       % at this resolution:    0 #>       % in zeroth bin:         100 #>       --> pass #>     y #>       Relative y-Resolution:   0.333333333333333 #>       % at this resolution:    14.4578313253012 #>       % in zeroth bin:         85.5421686746988 #>       --> pass #>   Data Quality Metric: Noise #>     x #>       Relative x-Noise:        1.10867931147058e-14 #>       --> pass #>     y #>       Relative y-Noise:        0.180268584275293 #>       --> pass #>   Fit Quality Metric: Curvature #>     1st Quartile #>       Relative Residual Slope: 0.00504545399430856 #>       Number of Points:        13 #>       --> pass #>     4th Quartile #>       Relative Residual Slope: -0.00640617723442051 #>       Number of Points:        13 #>       --> pass #>   Fit Quality Metric: Fit Range #>       relative fit range:      0.661751152073733 #>       --> pass #>   Un-normalized fit #>       Final Slope:             68015.7632283683 MPa #>       True Intercept:          0.000123506433826068 MPa #>       y-Range:                 0 MPa - 74.0374755859375 MPa  # }"},{"path":"https://soylentorange.github.io/sdarr/reference/sdarr.lazy.html","id":null,"dir":"Reference","previous_headings":"","what":"Random sub-sampling variant of the SDAR-algorithm — sdarr.lazy","title":"Random sub-sampling variant of the SDAR-algorithm — sdarr.lazy","text":"Run random sub-sampling modification SDAR algorithm originally standardized ASTM E3076-18. original version uses numerous linear regressions (.lm.fit() stats-package), can painfully slow test data high resolution. lazy variant algorithm use several random sub-samples data find best estimate fit-range within data.","code":""},{"path":"https://soylentorange.github.io/sdarr/reference/sdarr.lazy.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Random sub-sampling variant of the SDAR-algorithm — sdarr.lazy","text":"","code":"sdarr.lazy(   data,   x,   y,   fit.rep = 5,   fit.candidates = 20,   cutoff_probability = 0.975,   quality_penalty = 0.1,   enforce_subsampling = FALSE,   enforce_denoising = FALSE,   vmd.alpha = 1000,   verbose = \"report\",   showPlots = \"report\",   savePlots = FALSE )"},{"path":"https://soylentorange.github.io/sdarr/reference/sdarr.lazy.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Random sub-sampling variant of the SDAR-algorithm — sdarr.lazy","text":"data Data record analyze. Labels data columns used units. x, y <tidy-select> Columns x y within data. fit.rep Repetitions random sub-sampling fitting. fit.candidates Give number selecting optimum fit candidates (ordered decreasingly normalized residuals) repetitions random sub-sampling. cutoff_probability Cut-probability estimating optimum size sub-sampled data range via logistic regression. quality_penalty Factor -weight fits inferior data- fit-quality metrics. enforce_subsampling Set TRUE, use sub-sampling method even computationally expensive standard SDAR-algorithm. enforce_denoising Set TRUE, enforce de-noising test record finding final fitting range. vmd.alpha numeric value specifying balancing parameter data-fidelity constraint VMDecomp::vmd de-noising original data failing data quality checks. verbose, showPlots Give informational messages plots computation. Defaults \"report\" show report plot final fit. Set \"\" also give messages individual steps. Set \"none\" quiet. Can abbreviated. savePlots Set TRUE get plot-functions result later use.","code":""},{"path":"https://soylentorange.github.io/sdarr/reference/sdarr.lazy.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Random sub-sampling variant of the SDAR-algorithm — sdarr.lazy","text":"list containing data-frame results final fit, lists quality- fit-metrics, list containing crated plot-functions (savePlots = TRUE).","code":""},{"path":"https://soylentorange.github.io/sdarr/reference/sdarr.lazy.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Random sub-sampling variant of the SDAR-algorithm — sdarr.lazy","text":"function can use parallel processing via furrr-package. use feature, set plan default sequential strategy beforehand. random values drawn, set random seed beforehand get reproducible results.","code":""},{"path":"https://soylentorange.github.io/sdarr/reference/sdarr.lazy.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Random sub-sampling variant of the SDAR-algorithm — sdarr.lazy","text":"Lucon, E. (2019). Use validation slope determination analysis residuals (SDAR) algorithm (NIST TN 2050; p. NIST TN 2050). National Institute Standards Technology. https://doi.org/10.6028/NIST.TN.2050 Standard Practice Determination Slope Linear Region Test Record (ASTM E3076-18). (2018). https://doi.org/10.1520/E3076-18 Graham, S., & Adler, M. (2011). Determining Slope Quality Fit Linear Part Test Record. Journal Testing Evaluation - J TEST EVAL, 39. https://doi.org/10.1520/JTE103038","code":""},{"path":[]},{"path":"https://soylentorange.github.io/sdarr/reference/sdarr.lazy.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Random sub-sampling variant of the SDAR-algorithm — sdarr.lazy","text":"","code":"# Synthesize a test record resembling Al 6060 T66 # (Values according to Metallic Material Properties # Development and Standardization (MMPDS) Handbook). # Explicitly set names to \"strain\" and \"stress\".  Al_6060_T66 <- synthesize_test_data(   slope = 68000,   yield.y = 160,   ultimate.y = 215,   ultimate.x = 0.091,   x.name = \"strain\",   y.name = \"stress\" )   # use sdarr.lazy() to analyze the synthetic test record # (using relaxed settings for the noise-free synthetic data) # will print a report and give a plot of the final fit # \\donttest{ result <- sdarr.lazy(Al_6060_T66, strain, stress,   cutoff_probability = 0.8,   fit.rep = 2 ) #> Determination of Slope in the Linear Region of a Test Record: #> Random sub-sampling modification of the SDAR-algorithm #>   Random sub-sampling information: #>       216 points of 337 points in the normalized range were used. #>       0 % of sub-sampled normalized ranges passed the data quality checks. #>       100 % of linear regressions passed the fit quality checks. #>       0 % of linear regressions passed all quality checks. #>    #>   Data Quality Metric: Digital Resolution #>     x #>       Relative x-Resolution:   0.333333333333333 #>       % at this resolution:    0 #>       % in zeroth bin:         100 #>       --> pass #>     y #>       Relative y-Resolution:   0.333333333333333 #>       % at this resolution:    0.597014925373134 #>       % in zeroth bin:         99.4029850746269 #>       --> pass #>   Data Quality Metric: Noise #>     x #>       Relative x-Noise:        1.12835262887974e-14 #>       --> pass #>     y #>       Relative y-Noise:        0.0456504547013489 #>       --> pass #>   Fit Quality Metric: Curvature #>     1st Quartile #>       Relative Residual Slope: 0.000918627599492298 #>       Number of Points:        49 #>       --> pass #>     4th Quartile #>       Relative Residual Slope: -0.00482474888578022 #>       Number of Points:        49 #>       --> pass #>   Fit Quality Metric: Fit Range #>       relative fit range:      0.668672756582483 #>       --> pass #>   Un-normalized fit #>       Final Slope:             68001.5357120182 MPa #>       True Intercept:          0.000848743193187772 MPa #>       y-Range:                 0 MPa - 73.2632446289062 MPa  # }"},{"path":"https://soylentorange.github.io/sdarr/reference/synthesize_test_data.html","id":null,"dir":"Reference","previous_headings":"","what":"Synthesize Test Data — synthesize_test_data","title":"Synthesize Test Data — synthesize_test_data","text":"Synthesize Test Data Ramberg-Osgood equation.","code":""},{"path":"https://soylentorange.github.io/sdarr/reference/synthesize_test_data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Synthesize Test Data — synthesize_test_data","text":"","code":"synthesize_test_data(   slope,   yield.y,   yield.xp = 0.002,   ultimate.y,   ultimate.x,   offset = 0,   toe.initial.y = 0,   toe.initial.slope = slope,   toe.max.y = 0,   enob.x = 14,   enob.y = 14,   enob.x_FS = 16,   enob.y_FS = 16,   enob.x_noise = 0,   enob.y_noise = 0,   x.name = \"strain\",   y.name = \"stress\",   x.unit = NULL,   y.unit = \"MPa\" )"},{"path":"https://soylentorange.github.io/sdarr/reference/synthesize_test_data.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Synthesize Test Data — synthesize_test_data","text":"slope Slope linear region. yield.y y-value yield point. yield.xp Plastic deformation yield point. Defaults 0.002. ultimate.y Maximum y-value post-linear region. ultimate.x Maximum x-value post-linear region. offset Value y-offset. toe.initial.y Intersection toe-region y-axis (adding offset). toe.initial.slope Initial slope toe region. toe.max.y End toe region. enob.x Effective number bits synthetic data x-range. determine number points returned data (.e. 2^enob.x). Also used adding quantization noise. enob.y Effective number bits synthetic data y-range. Used adding quantization noise. enob.x_FS Effective number bits full-scale x-range. Using determine level quantization/data-noise x-values. enob.y_FS Effective number bits full-scale y-range. Using determine level quantization/data-noise y-values. enob.x_noise Add noise x-data. Give effective number bits full-scale x-range. enob.y_noise Add noise y-data. Give effective number bits full-scale y-range. x.name Name x-values. Defaults \"strain\". y.name Name y-values. Defaults \"stress\". x.unit Unit x-values. Can NULL. y.unit Unit y-values. Can NULL. Defaults \"MPa\".","code":""},{"path":"https://soylentorange.github.io/sdarr/reference/synthesize_test_data.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Synthesize Test Data — synthesize_test_data","text":"data.frame synthetic data. Units (provided) given variable labels.","code":""},{"path":"https://soylentorange.github.io/sdarr/reference/synthesize_test_data.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Synthesize Test Data — synthesize_test_data","text":"Use Ramberg-Osgood equation formulation Hill create synthetic data similar quasi-static mechanical testing. Parameters K n Ramberg-Osgood equation calculated yield-strength (typically 0.2% offset) second point post-yield region (e.g. point ultimate stress) proposed Hill.","code":""},{"path":"https://soylentorange.github.io/sdarr/reference/synthesize_test_data.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Synthesize Test Data — synthesize_test_data","text":"random values drawn, set random seed beforehand get reproducible results.","code":""},{"path":"https://soylentorange.github.io/sdarr/reference/synthesize_test_data.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Synthesize Test Data — synthesize_test_data","text":"Hill, H. N. (1944). Determination stress-strain relations \" offset\" yield strength values. Aluminum Co America Pittsburgh Pa. Ramberg, W., & Osgood, W. R. (1943). Description Stress-Strain Curves Three Parameters; National Advisory Committee Aeronautics Technical Note. NACA-TN-902. Rice, R. C., Jackson, J. L., Bakuckas, J., & Thompson, S. (2003). Metallic Materials Properties Development Standardization (MMPDS) (DOT/FAA/AR-MMPDS-01).","code":""},{"path":"https://soylentorange.github.io/sdarr/reference/synthesize_test_data.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Synthesize Test Data — synthesize_test_data","text":"","code":"# Synthesize a test record resembling Al 6060 T66 # (Values according to Metallic Material Properties Development and # Standardization (MMPDS) Handbook) Al_6060_T66 <- synthesize_test_data(   slope = 68000,   yield.y = 160,   ultimate.y = 215,   ultimate.x = 0.091 )  plot(   x = Al_6060_T66$strain, y = Al_6060_T66$stress,   type = \"l\",   xlab = \"strain\", ylab = \"stress (in MPa)\" )"},{"path":"https://soylentorange.github.io/sdarr/news/index.html","id":"sdarr-045","dir":"Changelog","previous_headings":"","what":"sdarr 0.4.5","title":"sdarr 0.4.5","text":"Fixed typos. Use tidyverse_style Reduced use global variables minimum (?) Modified (lengthy) example sdarr() “donttest”. Added (web-) article de-noising feature.","code":""},{"path":"https://soylentorange.github.io/sdarr/news/index.html","id":"sdarr-044","dir":"Changelog","previous_headings":"","what":"sdarr 0.4.4","title":"sdarr 0.4.4","text":"Update documentation.","code":""},{"path":"https://soylentorange.github.io/sdarr/news/index.html","id":"sdarr-043","dir":"Changelog","previous_headings":"","what":"sdarr 0.4.3","title":"sdarr 0.4.3","text":"Update documentation.","code":""},{"path":"https://soylentorange.github.io/sdarr/news/index.html","id":"sdarr-042","dir":"Changelog","previous_headings":"","what":"sdarr 0.4.2","title":"sdarr 0.4.2","text":"Added example using sdarr.lazy().","code":""},{"path":"https://soylentorange.github.io/sdarr/news/index.html","id":"sdarr-041","dir":"Changelog","previous_headings":"","what":"sdarr 0.4.1","title":"sdarr 0.4.1","text":"Added NEWS.md file track changes package.","code":""},{"path":"https://soylentorange.github.io/sdarr/news/index.html","id":"sdarr-032","dir":"Changelog","previous_headings":"","what":"sdarr 0.3.2","title":"sdarr 0.3.2","text":"Use de-noised data sdarr.lazy() data quality metrics fail data-set.","code":""},{"path":"https://soylentorange.github.io/sdarr/news/index.html","id":"sdarr-030","dir":"Changelog","previous_headings":"","what":"sdarr 0.3.0","title":"sdarr 0.3.0","text":"first working version.","code":""}]
