% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/sdarr_lazy.R
\name{sdar.lazy}
\alias{sdar.lazy}
\title{Random sub-sampling variant of the SDAR-algorithm}
\usage{
sdar.lazy(
  data,
  x,
  y,
  verbose = TRUE,
  plot = TRUE,
  plotFun = FALSE,
  n.fit = 5,
  cutoff_probability = 0.5,
  ...
)
}
\arguments{
\item{data}{Data record to analyze. Labels of the data columns will be used
as units.}

\item{x, y}{<\code{\link[dplyr:dplyr_tidy_select]{tidy-select}}> Columns with x and y
within data.}

\item{verbose, plot}{Give a summarizing report / show a plot of the final fit.}

\item{plotFun}{Set to \code{TRUE} to get a plot-function for the final fit with
the results for later use.}

\item{n.fit}{Repetitions of random sub-sampling and fitting.}

\item{cutoff_probability}{Cut-off probability for estimating optimum size of
sub-sampled data range via logistic regression.}

\item{...}{<\code{\link[rlang:dyn-dots]{dynamic-dots}}> Pass parameters to downstream
functions: set \code{verbose.all}, \code{plot.all} and \code{plotFun.all} to \code{TRUE} to get
additional diagnostic information during processing data. Set
\code{enforce_subsampling} to \code{TRUE} to run the random sub-sampling algorithm
even though it might be slower than the standard SDAR-algorithm.}
}
\value{
A list containing a data.frame with the results of the final fit,
lists with the quality- and fit-metrics, and a list containing the crated
plot-function(s) (if \code{plotFun = TRUE} or, for all diagnostic plots
\code{plotFun.all = TRUE}).
}
\description{
Run a random sub-sampling modification of the SDAR algorithm as
originally standardized in ASTM E3076-18. As the original version uses
numerous linear regressions (\code{.lm.fit()} from the stats-package), it can be
painfully slow for test data with high resolution. The lazy variant of the
algorithm will use several random sub-samples of the data to find the best
estimate for the fit-range within the data. Additionally, the test data
can be de-noised using Variational Mode Decomposition in case initial data
quality checks have failed (highly experimental). See the article on \href{https://soylentorange.github.io/sdarr/articles/sdarr_validation.html}{validation}
on the \href{https://soylentorange.github.io/sdarr/}{package-website} for
further information.
}
\note{
The function can use parallel processing via the
\href{https://furrr.futureverse.org/}{furrr-package}. To use this feature, set
up a plan other than the default sequential strategy beforehand. Also, as
random values are drawn, set a \code{\link[base:Random]{random seed}} beforehand to get
reproducible results.
}
\examples{
# Synthesize a test record resembling Al 6060 T66
# (Values according to Metallic Material Properties
# Development and Standardization (MMPDS) Handbook).
# Explicitly set names to "strain" and "stress".

Al_6060_T66 <- synthesize_test_data(
  slope = 68000,
  yield.y = 160,
  ultimate.y = 215,
  ultimate.x = 0.091,
  x.name = "strain",
  y.name = "stress",
  toe.start.y = 3, toe.end.y = 10,
  toe.start.slope = 13600
)


# use sdar.lazy() to analyze the (noise-free) synthetic test record
# will print a report and give a plot of the final fit
\donttest{
result <- sdar.lazy(Al_6060_T66, strain, stress)
}

}
\references{
Lucon, E. (2019). Use and validation of the slope determination
by the analysis of residuals (SDAR) algorithm (NIST TN 2050; p. NIST TN
2050). National Institute of Standards and Technology.
https://doi.org/10.6028/NIST.TN.2050

Standard Practice for Determination of the Slope in the Linear
Region of a Test Record (ASTM E3076-18). (2018).
https://doi.org/10.1520/E3076-18

Graham, S., & Adler, M. (2011). Determining the Slope and Quality
of Fit for the Linear Part of a Test Record. Journal of Testing and
Evaluation - J TEST EVAL, 39. https://doi.org/10.1520/JTE103038

Dragomiretskiy, K., & Zosso, D. (2014). Variational Mode
Decomposition. IEEE Transactions on Signal Processing, 62(3), 531â€“544.
https://doi.org/10.1109/TSP.2013.2288675
}
\seealso{
\code{\link[=sdar]{sdar()}} for the standard SDAR-algorithm.
}
