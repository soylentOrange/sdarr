[{"path":"https://soylentorange.github.io/sdarr/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2023-2024 sdarr authors Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"https://soylentorange.github.io/sdarr/articles/sdarr_validation.html","id":"reference-data-set","dir":"Articles","previous_headings":"","what":"Reference Data Set","title":"Validation against Reference Data Set","text":"plot Reference Data Set (downloading, unpacking labeling) validation Slope Determination Analysis Residuals (SDAR) algorithm given .","code":""},{"path":"https://soylentorange.github.io/sdarr/articles/sdarr_validation.html","id":"link_to_standard_sdar","dir":"Articles","previous_headings":"","what":"Validation of the standard SDAR-algorithm (sdar)","title":"Validation against Reference Data Set","text":"","code":"# Run the algorithm sdar_result <- E3076_DS1_2018 %>%   sdar(extensometer, force,     plot = FALSE, plotFun = TRUE) #> Determination of Slope in the Linear Region of a Test Record: #> SDAR-algorithm #>   Data Quality Metric: Digital Resolution #>     x #>       Relative x-Resolution:   0.666666666666667 #>       % at this resolution:    15.5963302752294 #>       % in zeroth bin:         6.42201834862385 #>       --> pass #>     y #>       Relative y-Resolution:   0.333333333333333 #>       % at this resolution:    4.58715596330275 #>       % in zeroth bin:         90.8256880733945 #>       --> pass #>   Data Quality Metric: Noise #>     x #>       Relative x-Noise:        0.325118923848699 #>       --> pass #>     y #>       Relative y-Noise:        0.14437695453926 #>       --> pass #>   Fit Quality Metric: Curvature #>     1st Quartile #>       Relative Residual Slope: 0.366359693308656 #>       Number of Points:        25 #>       --> pass #>     4th Quartile #>       Relative Residual Slope: 0.205348930211828 #>       Number of Points:        25 #>       --> pass #>   Fit Quality Metric: Fit Range #>       relative fit range:      0.925620787205303 #>       --> pass #>   Un-normalized fit #>       Final Slope:             328.108508087124 kN/mm #>       True Intercept:          -0.0376051859940911 kN #>       y-Range:                 5.456632 kN - 14.35957 kN"},{"path":"https://soylentorange.github.io/sdarr/articles/sdarr_validation.html","id":"validation-result-of-the-standard-sdar-algorithm-sdar","dir":"Articles","previous_headings":"Validation of the standard SDAR-algorithm (sdar)","what":"Validation Result of the standard SDAR-algorithm (sdar)","title":"Validation against Reference Data Set","text":"results (see verbose messages table 1) analysis using sdar() practically identical results given ASTM E3076-18 perfectly match results NIST Technical Note 2050 E. Lucon (except omitting rounding). stated NIST Technical Note 2050 E. Lucon …small discrepancies likely attributable rounding errors…. Table 1: Result comparison standard SDAR-algorithm","code":""},{"path":"https://soylentorange.github.io/sdarr/articles/sdarr_validation.html","id":"link_to_lazy_sdar","dir":"Articles","previous_headings":"","what":"Validation of the Random Sub-sampling Modification of the SDAR-algorithm (sdar_lazy)","title":"Validation against Reference Data Set","text":"","code":"# Run the algorithm (after setting a random seed) set.seed(50041180) # As the data set is rather short, the algorithm might refuse to use # the random sub-sampling as it will require more computational effort. # Enforce by setting enforce_subsampling = TRUE.  lazy_result <- E3076_DS1_2018 %>%   sdar_lazy(extensometer, force,     plot = FALSE, plotFun = TRUE,     enforce_subsampling = TRUE) #> Determination of Slope in the Linear Region of a Test Record: #> Random sub-sampling modification of the SDAR-algorithm #>   Random sub-sampling information: #>       83 points of 220 points in the normalized range were used. #>       0 % of sub-sampled normalized ranges passed the data quality checks. #>       72 % of linear regressions passed the fit quality checks. #>       0 % of linear regressions passed all quality checks. #>  #>   Data Quality Metric: Digital Resolution #>     x #>       Relative x-Resolution:   0.666666666666667 #>       % at this resolution:    15.5963302752294 #>       % in zeroth bin:         6.42201834862385 #>       --> pass #>     y #>       Relative y-Resolution:   0.333333333333333 #>       % at this resolution:    4.58715596330275 #>       % in zeroth bin:         90.8256880733945 #>       --> pass #>   Data Quality Metric: Noise #>     x #>       Relative x-Noise:        0.325118923848699 #>       --> pass #>     y #>       Relative y-Noise:        0.14437695453926 #>       --> pass #>   Fit Quality Metric: Curvature #>     1st Quartile #>       Relative Residual Slope: 0.385319540604674 #>       Number of Points:        25 #>       --> pass #>     4th Quartile #>       Relative Residual Slope: -0.0711761723808788 #>       Number of Points:        23 #>       --> pass #>   Fit Quality Metric: Fit Range #>       relative fit range:      0.914927986462066 #>       --> pass #>   Un-normalized fit #>       Final Slope:             327.758533115795 kN/mm #>       True Intercept:          -0.0279149776265081 kN #>       y-Range:                 5.551003 kN - 14.55799 kN"},{"path":"https://soylentorange.github.io/sdarr/articles/sdarr_validation.html","id":"validation-result-of-the-random-sub-sampling-modification-of-the-sdar-algorithm-sdar_lazy","dir":"Articles","previous_headings":"Validation of the Random Sub-sampling Modification of the SDAR-algorithm (sdar_lazy)","what":"Validation Result of the Random Sub-sampling Modification of the SDAR-algorithm (sdar_lazy)","title":"Validation against Reference Data Set","text":"first glimpse, results (see verbose messages table 2) analysis using random sub-sampling variant SDAR-algorithm sdar_lazy() identical results given ASTM E3076-18 results NIST Technical Note 2050 E. Lucon. However, considering 95% confidence interval final fitting (mentioned ASTM E3076, additionally calculated final linear regression data sdar() sdar_lazy()). final slope lazy variant (327.74 kN/mm) well line standard variant (95%-CI: [327.44 kn/mm, 328.78 kN/mm]). Similarly, true intercept lazy variant (-27.7 N) well line standard variant (95%-CI: [-58.7 N, -16.5 N]). fitting range estimated prior finding linear regression sdar_lazy(), minor difference y-range final fits resulting slightly deviating final results. Comparing regression curves sdar_lazy() sdar() plot (plotted 95%-CI sdar()), see practically difference (zoom …lot… see difference). Table 2: Result comparison random sub-sampling SDAR-algorithm","code":""},{"path":"https://soylentorange.github.io/sdarr/articles/sdarr_validation.html","id":"conclusions","dir":"Articles","previous_headings":"","what":"Conclusions","title":"Validation against Reference Data Set","text":"Even though benchmarking real validation, results sdar() practically identical results listed ASTM E3076-18 NIST Technical Note 2050 E. Lucon. Considering 95% confidence intervals fitting results, seems true random sub-sampling modification used sdar_lazy().","code":""},{"path":"https://soylentorange.github.io/sdarr/articles/sdarr_validation.html","id":"final-remark","dir":"Articles","previous_headings":"Conclusions","what":"Final Remark","title":"Validation against Reference Data Set","text":"Even though functions within package tested, see remark LICENSE… SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"https://soylentorange.github.io/sdarr/articles/speed_improvment.html","id":"data-set-for-speed-estimation","dir":"Articles","previous_headings":"","what":"Data Set for Speed Estimation","title":"Speed Benchmarking the SDAR-algorithm","text":"Test Data Set Speed Estimation generated different resolution x (strain) 11.3 15.6 effective bits. total 24 synthetic test records resembling tensile mechanical testing aluminium (EN AW-6060-T66), toe region added minor noise synthetic stress data) created using sdarr::synthesize_test_data(). Test data evaluated sequential plan using one core, multisession plan using four eight cores. time execution sdarr::sdar(), sdarr:sdar_lazy() sdarr:sdar_lazy() enforced sub-sampling measured using pracma::tic,toc. evaluation run 2021 MacBook Pro (M1 Max processor 64 GB Ram macOS 13.4.1).","code":""},{"path":"https://soylentorange.github.io/sdarr/articles/speed_improvment.html","id":"side-note-on-bechmarking","dir":"Articles","previous_headings":"Data Set for Speed Estimation","what":"Side Note on Bechmarking","title":"Speed Benchmarking the SDAR-algorithm","text":"benchmarking takes significant amount time, results pre-calculated (using rmd-file speed_improvement_data.Rmd, available within installed sdarr-package). Use rmarkdown::render() benchmarking conducted computer knitted html-document current working directory, .e. run following block:","code":"# knit the benchmarking-rmd to html-file # (and save the result data in the current working directory) # caution: might take some time... speed_improvement_data <- rmarkdown::render(   input = paste0(system.file(package = \"sdarr\"),                   \"/rmd/speed_improvement_data.Rmd\"),   params = list(     # set Number of cores for benchmarking     use_cores = c(1, 4, 8),      # synthetic data - set min and max effective number of bits     enob = c(11.3, 15.6),     # synthetic data - set Number of synthetic test records     length.out = 24,     sdarr_benchmark_result_filepath = file.path(       getwd(), \"sdarr_benchmark_result.rda\")),   knit_root_dir = getwd(),   output_dir = getwd()   )    # knit the evaluation-rmd to html-file speed_improvement_evaluation <- rmarkdown::render(   input = paste0(system.file(package = \"sdarr\"),                   \"/rmd/speed_improvement_evaluation.Rmd\"),   params = list(sdarr_benchmark_result_filepath = file.path(     getwd(), \"sdarr_benchmark_result.rda\")),   knit_root_dir = getwd(),   output_dir = getwd()   )    # view the knitted file utils::browseURL(speed_improvement_evaluation)"},{"path":"https://soylentorange.github.io/sdarr/articles/speed_improvment.html","id":"benchmarking-results-data-set","dir":"Articles","previous_headings":"","what":"Benchmarking Results Data Set","title":"Speed Benchmarking the SDAR-algorithm","text":"results benchmarking contain speed estimations normalized data ranges 53 1021 points. total 24 synthetic test records analyzed using 1 8 cores. Data pre-calculated (using rmd-file speed_improvement_data.Rmd, available within installed sdarr-package) copy-pasted .","code":""},{"path":"https://soylentorange.github.io/sdarr/articles/speed_improvment.html","id":"results","dir":"Articles","previous_headings":"","what":"Results","title":"Speed Benchmarking the SDAR-algorithm","text":"execution time different algorithms number points normalized range given plot.","code":""},{"path":"https://soylentorange.github.io/sdarr/articles/speed_improvment.html","id":"summary-and-conclusion","dir":"Articles","previous_headings":"","what":"Summary and Conclusion","title":"Speed Benchmarking the SDAR-algorithm","text":"expected, standard SDAR-algorithm seems scale quadratic number points normalized data range. also benefits using several cores (except minor overhead ~100ms using 8 cores points normalized data range). random sub-sampling modification, available via sdar_lazy(), drastically reduces processing time compared standard SDAR-algorithm higher resolution test data. lower resolution test data, algorithm fall back standard SDAR-algorithm still, additional overhead considered. Comparing results, speed improvement random sub-sampling modification apparent 250 - 400 points normalized data range (depending number cores used). high-resolution data (> 600 points normalized range), execution time sdar_lazy() seems stabilize (less) constant value 1.8 seconds (using four cores) 3 seconds (using one eight cores). actual time vary depending machine used computation. Using using several cores SDAR-algorithm via setting multisession plan drastically improve performance. Yet, additional overhead might slow processing using maximum available cores. Tweaking plan (see vignette Future R: Future Topologies information) might increase overall performance processing batches data.","code":""},{"path":"https://soylentorange.github.io/sdarr/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Robert Wendlandt. Author, maintainer. UKSH. Copyright holder, funder.","code":""},{"path":"https://soylentorange.github.io/sdarr/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Wendlandt R (2024). sdarr: Slope Determination Analysis Residuals. R package version 0.7.0, https://soylentorange.github.io/sdarr/.","code":"@Manual{,   title = {sdarr: Slope Determination by Analysis of Residuals},   author = {Robert Wendlandt},   year = {2024},   note = {R package version 0.7.0},   url = {https://soylentorange.github.io/sdarr/}, }"},{"path":"https://soylentorange.github.io/sdarr/index.html","id":"sdarr","dir":"","previous_headings":"","what":"Slope Determination by Analysis of Residuals","title":"Slope Determination by Analysis of Residuals","text":"sdarr-package provides R implementation algorithm Slope Determination Analysis Residuals (SDAR) standardized ASTM E3076-18. allows automated objective linear-fitting mechanical test-data. See detailed description algorithm NIST Technical Note 2050 E. Lucon Graham & Adler (2011). SDAR-algorithm, implemented sdar(), heavily uses linear regressions, faster version sdar_lazy() implemented, finds optimum region final linear regression random sub-sampling within normalized range test-data.","code":""},{"path":"https://soylentorange.github.io/sdarr/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Slope Determination by Analysis of Residuals","text":"can install latest release version sdarr GitHub : can install development version sdarr GitHub :","code":"# install.packages(\"devtools\") devtools::install_github(\"soylentOrange/sdarr@*release\") # install.packages(\"devtools\") devtools::install_github(\"soylentOrange/sdarr\")"},{"path":[]},{"path":"https://soylentorange.github.io/sdarr/index.html","id":"standard-sdar-algorithm","dir":"","previous_headings":"Examples","what":"Standard SDAR-algorithm","title":"Slope Determination by Analysis of Residuals","text":"basic example using sdar() synthetic data set, based properties aluminium (EN AW-6060-T66). toe-region non-zero intercept added make test data less boring. sdar() analyzes data give small report message. confirm Young’s-modulus 69 GPa intercept 10 MPa. make use multi-core processing, configure furrr use multi-session strategy.","code":"library(sdarr)  # setup multisession calculations with a maximum of 8 cores # (or however many cores are available...) future::plan(future::multisession,   workers = min(c(parallelly::availableCores(), 8)) )  # Synthesize a test record resembling EN AW-6060-T66 Al_6060_T66 <- synthesize_test_data(   slope = 69000, yield.y = 160,   ultimate.y = 215, ultimate.x = 0.08,   offset = 10,   toe.start.y = 3, toe.end.y = 15,   toe.start.slope = 13600 )  # Analyze the test record Al_6060_T66.result <- sdar(Al_6060_T66,   x = strain, y = stress) #> Determination of Slope in the Linear Region of a Test Record: #> SDAR-algorithm #>   Data Quality Metric: Digital Resolution #>     x #>       Relative x-Resolution:   0.333333333333333 #>       % at this resolution:    0 #>       % in zeroth bin:         100 #>       --> pass #>     y #>       Relative y-Resolution:   0.333333333333333 #>       % at this resolution:    0.268096514745308 #>       % in zeroth bin:         99.7319034852547 #>       --> pass #>   Data Quality Metric: Noise #>     x #>       Relative x-Noise:        1.14246654063749e-14 #>       --> pass #>     y #>       Relative y-Noise:        0.0572451173412188 #>       --> pass #>   Fit Quality Metric: Curvature #>     1st Quartile #>       Relative Residual Slope: 0.00200695921876536 #>       Number of Points:        44 #>       --> pass #>     4th Quartile #>       Relative Residual Slope: -0.00712826619905767 #>       Number of Points:        44 #>       --> pass #>   Fit Quality Metric: Fit Range #>       relative fit range:      0.817634510547523 #>       --> pass #>   Un-normalized fit #>       Final Slope:             68995.0585161614 MPa #>       True Intercept:          10.002547500777 MPa #>       y-Range:                 24.8291015625 MPa - 82.7682495117188 MPa"},{"path":"https://soylentorange.github.io/sdarr/index.html","id":"random-sub-sampling-modification-of-the-sdar-algorithm","dir":"","previous_headings":"Examples","what":"Random sub-sampling modification of the SDAR-algorithm","title":"Slope Determination by Analysis of Residuals","text":"basic example sdar_lazy(), random sub-sampling modification SDAR-algorithm synthetic data set, based properties aluminium (EN AW-6060-T66). toe-region non-zero intercept added make test data less boring (see ). sdar_lazy() analyzes data optimum size fitting region via random sub-sampling. give small report message finding optimum fit. confirm Young’s-modulus 69 GPa intercept 10 MPa. synthetic data set noise-free (except quantization-noise), one random sub-sampling run . make use multicore processing, configure furrr use multisession strategy (see ).","code":"# set a random seed set.seed(50041180)  # Analyze the test record # (with enforced random sub-sampling) Al_6060_T66.result_lazy <- sdar_lazy(Al_6060_T66,   x = strain, y = stress, plot = FALSE, enforce_subsampling = TRUE) #> Determination of Slope in the Linear Region of a Test Record: #> Random sub-sampling modification of the SDAR-algorithm #>   Random sub-sampling information: #>       118 points of 375 points in the normalized range were used. #>       0 % of sub-sampled normalized ranges passed the data quality checks. #>       100 % of linear regressions passed the fit quality checks. #>       0 % of linear regressions passed all quality checks. #>  #>   Data Quality Metric: Digital Resolution #>     x #>       Relative x-Resolution:   0.333333333333333 #>       % at this resolution:    0 #>       % in zeroth bin:         100 #>       --> pass #>     y #>       Relative y-Resolution:   0.333333333333333 #>       % at this resolution:    0.268096514745308 #>       % in zeroth bin:         99.7319034852547 #>       --> pass #>   Data Quality Metric: Noise #>     x #>       Relative x-Noise:        1.14246654063749e-14 #>       --> pass #>     y #>       Relative y-Noise:        0.0572451173412188 #>       --> pass #>   Fit Quality Metric: Curvature #>     1st Quartile #>       Relative Residual Slope: 0.00287008465272615 #>       Number of Points:        43 #>       --> pass #>     4th Quartile #>       Relative Residual Slope: -0.00734852665893149 #>       Number of Points:        43 #>       --> pass #>   Fit Quality Metric: Fit Range #>       relative fit range:      0.827242206235012 #>       --> pass #>   Un-normalized fit #>       Final Slope:             68995.3087875296 MPa #>       True Intercept:          10.0023835307365 MPa #>       y-Range:                 25.15869140625 MPa - 82.4249267578125 MPa"},{"path":"https://soylentorange.github.io/sdarr/index.html","id":"plot-functions","dir":"","previous_headings":"Examples","what":"Plot Functions","title":"Slope Determination by Analysis of Residuals","text":"sdar() sdar_lazy() create diagnostic plots throughout calculations, shown requested (.e. set plot = TRUE showing plot final fit, plot.= TRUE showing additional diagnostic plots). plot drawn later, can call provided plot-function results. plot-functions crated, can easily tap environment convert e.g. ggplot2-graphic.","code":"# show plot of final fit using the plot function from the result (see above) Al_6060_T66.result_lazy$plots$final.fit() # satisfy pipe addiction... library(magrittr) # make nice and shiny graphics with ggplot2... library(ggplot2)  # plot the final fit using ggplot2 Al_6060_T66.result_lazy %>% {      # tap the environment of the crated plot-function   plot.env <- rlang::fn_env(.$plots$final.fit)    # get data and labels   plot.data <- plot.env$plot.data   plot.main <- plot.env$plot.main   plot.xlab <- plot.env$plot.xlab   plot.ylab <- plot.env$plot.ylab   plot.y.data.max <- plot.data$y.data %>% max()   plot.y.lowerBound <- plot.env$y.lowerBound   plot.y.upperBound <- plot.env$y.upperBound    # create the ggplot2   plot.data %>% ggplot(aes(x = x.data, y = y.data,                            color = \"Test data\\n(EN AW-6060-T66)\")) +     geom_line() +     geom_line(data = plot.data %>%                 dplyr::filter(y.fit <= plot.y.data.max),               aes(x = x.data, y = y.fit, color = \"fit (sdar_lazy)\")) +     geom_hline(aes(color = \"fit range\",                    yintercept = plot.y.lowerBound),                linetype = \"dashed\", show.legend = TRUE) +     geom_hline(aes(color = \"fit range\",                    yintercept = plot.y.upperBound),                linetype = \"dashed\",show.legend = TRUE) +     theme_bw() +     labs(title = plot.main,          x = plot.xlab,          y = plot.ylab,          caption = paste0(\"Result of the random sub-sampling SDAR-algorithm:\",                           \"\\n\\nFinal Slope: \",                           round(.$sdar$finalSlope / 1000, 1), \" GPa\",                           \"\\nTrue Intercept: \",                           round(.$sdar$trueIntercept, 1), \" MPa\",\"                           \\n\\nFit Range: \",                           round(plot.y.lowerBound, 1), \" MPa - \",                           round(plot.y.upperBound, 1), \" MPa\")) }"},{"path":"https://soylentorange.github.io/sdarr/index.html","id":"acknowledgements","dir":"","previous_headings":"","what":"Acknowledgements","title":"Slope Determination by Analysis of Residuals","text":"sdarr-package created analysis mechanical test data project LOBio, funded German ministry education research (BMBF) grant number 13XP5174C.","code":""},{"path":"https://soylentorange.github.io/sdarr/reference/pipe.html","id":null,"dir":"Reference","previous_headings":"","what":"Pipe operator — %>%","title":"Pipe operator — %>%","text":"See magrittr::%>% details.","code":""},{"path":"https://soylentorange.github.io/sdarr/reference/pipe.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Pipe operator — %>%","text":"","code":"lhs %>% rhs"},{"path":"https://soylentorange.github.io/sdarr/reference/pipe.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Pipe operator — %>%","text":"lhs value magrittr placeholder. rhs function call using magrittr semantics.","code":""},{"path":"https://soylentorange.github.io/sdarr/reference/pipe.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Pipe operator — %>%","text":"result calling rhs(lhs).","code":""},{"path":"https://soylentorange.github.io/sdarr/reference/sdar.html","id":null,"dir":"Reference","previous_headings":"","what":"SDAR-Algorithm — sdar","title":"SDAR-Algorithm — sdar","text":"Run SDAR-algorithm standardized \"ASTM E3076-18\". use numerous linear regressions (.lm.fit() stats-package) can painfully slow test data high resolution. See article Speed Benchmarking SDAR-algorithm information.","code":""},{"path":"https://soylentorange.github.io/sdarr/reference/sdar.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"SDAR-Algorithm — sdar","text":"","code":"sdar(data, x, y, verbose = TRUE, plot = TRUE, ...)"},{"path":"https://soylentorange.github.io/sdarr/reference/sdar.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"SDAR-Algorithm — sdar","text":"data Data record analyze. Labels data columns used units. x, y <tidy-select> Columns x y within data. verbose, plot Give summarizing report / show plot final fit. ... <dynamic-dots> Pass parameters downstream functions: e.g. set verbose.plot.get additional diagnostic information processing data.","code":""},{"path":"https://soylentorange.github.io/sdarr/reference/sdar.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"SDAR-Algorithm — sdar","text":"list containing data.frame results final fit, lists quality- fit-metrics, list containing crated plot-functions.","code":""},{"path":"https://soylentorange.github.io/sdarr/reference/sdar.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"SDAR-Algorithm — sdar","text":"function can use parallel processing via furrr-package. use feature, set plan default sequential strategy beforehand.","code":""},{"path":"https://soylentorange.github.io/sdarr/reference/sdar.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"SDAR-Algorithm — sdar","text":"Lucon, E. (2019). Use validation slope determination analysis residuals (SDAR) algorithm (NIST TN 2050; p. NIST TN 2050). National Institute Standards Technology. https://doi.org/10.6028/NIST.TN.2050 Standard Practice Determination Slope Linear Region Test Record (ASTM E3076-18). (2018). https://doi.org/10.1520/E3076-18 Graham, S., & Adler, M. (2011). Determining Slope Quality Fit Linear Part Test Record. Journal Testing Evaluation - J TEST EVAL, 39. https://doi.org/10.1520/JTE103038","code":""},{"path":[]},{"path":"https://soylentorange.github.io/sdarr/reference/sdar.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"SDAR-Algorithm — sdar","text":"","code":"# Synthesize a test record resembling EN AW-6060-T66 # Explicitly set names to \"strain\" and \"stress\", # set effective number of bits in the x-data to 12 # to limit the number of data points.  Al_6060_T66 <- synthesize_test_data(   slope = 69000,   yield.y = 160,   ultimate.y = 215,   ultimate.x = 0.08,   x.name = \"strain\",   y.name = \"stress\",   toe.start.y = 3, toe.end.y = 10,   toe.start.slope = 13600,   enob.x = 12 )   # use sdar() to analyze the synthetic test record # will print a report and give a plot of the final fit # \\donttest{ result <- sdar(Al_6060_T66, strain, stress) #> Determination of Slope in the Linear Region of a Test Record: #> SDAR-algorithm #>   Data Quality Metric: Digital Resolution #>     x #>       Relative x-Resolution:   0.333333333333333 #>       % at this resolution:    0 #>       % in zeroth bin:         100 #>       --> pass #>     y #>       Relative y-Resolution:   0.333333333333333 #>       % at this resolution:    10.752688172043 #>       % in zeroth bin:         82.7956989247312 #>       --> pass #>   Data Quality Metric: Noise #>     x #>       Relative x-Noise:        9.44216060311802e-15 #>       --> pass #>     y #>       Relative y-Noise:        0.25059496508498 #>       --> pass #>   Fit Quality Metric: Curvature #>     1st Quartile #>       Relative Residual Slope: 0.000341884560090671 #>       Number of Points:        12 #>       --> pass #>     4th Quartile #>       Relative Residual Slope: -0.00714862515119831 #>       Number of Points:        12 #>       --> pass #>   Fit Quality Metric: Fit Range #>       relative fit range:      0.784159272884657 #>       --> pass #>   Un-normalized fit #>       Final Slope:             68997.5639839654 MPa #>       True Intercept:          0.00119126773051326 MPa #>       y-Range:                 9.43511962890625 MPa - 70.074462890625 MPa  # }"},{"path":"https://soylentorange.github.io/sdarr/reference/sdar_lazy.html","id":null,"dir":"Reference","previous_headings":"","what":"Random Sub-Sampling Variant of the SDAR-Algorithm — sdar_lazy","title":"Random Sub-Sampling Variant of the SDAR-Algorithm — sdar_lazy","text":"Run random sub-sampling modification SDAR algorithm standardized \"ASTM E3076-18\". original version uses numerous linear regressions (.lm.fit() stats-package), can painfully slow test data high resolution. lazy variant algorithm use several random sub-samples data find estimate fit-range within data thus can improve processing speed. See article Speed Benchmarking SDAR-algorithm information.","code":""},{"path":"https://soylentorange.github.io/sdarr/reference/sdar_lazy.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Random Sub-Sampling Variant of the SDAR-Algorithm — sdar_lazy","text":"","code":"sdar_lazy(   data,   x,   y,   verbose = TRUE,   plot = TRUE,   n.fit = 5,   cutoff_probability = 0.5,   ... )"},{"path":"https://soylentorange.github.io/sdarr/reference/sdar_lazy.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Random Sub-Sampling Variant of the SDAR-Algorithm — sdar_lazy","text":"data Data record analyze. Labels data columns used units. x, y <tidy-select> Columns x y within data. verbose, plot Give summarizing report / show plot final fit. n.fit Repetitions drawing random sub-sample data normalized finding fitting range find estimate final fitting range. cutoff_probability Cut-probability estimating optimum size sub-sampled data range via logistic regression, predicting sub-sampled data pass quality checks. ... <dynamic-dots> Pass parameters downstream functions: e.g. set verbose.plot.TRUE get additional diagnostic information processing data. Set enforce_subsampling TRUE run random sub-sampling algorithm even though might slower standard SDAR-algorithm.","code":""},{"path":"https://soylentorange.github.io/sdarr/reference/sdar_lazy.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Random Sub-Sampling Variant of the SDAR-Algorithm — sdar_lazy","text":"list containing data.frame results final fit, lists quality- fit-metrics, list containing crated plot-functions.","code":""},{"path":"https://soylentorange.github.io/sdarr/reference/sdar_lazy.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Random Sub-Sampling Variant of the SDAR-Algorithm — sdar_lazy","text":"function can use parallel processing via furrr-package. use feature, set plan default sequential strategy beforehand. Also, random values drawn, set random seed beforehand get reproducible results.","code":""},{"path":"https://soylentorange.github.io/sdarr/reference/sdar_lazy.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Random Sub-Sampling Variant of the SDAR-Algorithm — sdar_lazy","text":"Lucon, E. (2019). Use validation slope determination analysis residuals (SDAR) algorithm (NIST TN 2050; p. NIST TN 2050). National Institute Standards Technology. https://doi.org/10.6028/NIST.TN.2050 Standard Practice Determination Slope Linear Region Test Record (ASTM E3076-18). (2018). https://doi.org/10.1520/E3076-18 Graham, S., & Adler, M. (2011). Determining Slope Quality Fit Linear Part Test Record. Journal Testing Evaluation - J TEST EVAL, 39. https://doi.org/10.1520/JTE103038","code":""},{"path":[]},{"path":"https://soylentorange.github.io/sdarr/reference/sdar_lazy.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Random Sub-Sampling Variant of the SDAR-Algorithm — sdar_lazy","text":"","code":"# Synthesize a test record resembling EN AW-6060-T66. # Explicitly set names to \"strain\" and \"stress\".  Al_6060_T66 <- synthesize_test_data(   slope = 69000,   yield.y = 160,   ultimate.y = 215,   ultimate.x = 0.08,   x.name = \"strain\",   y.name = \"stress\",   toe.start.y = 3, toe.end.y = 10,   toe.start.slope = 13600 )   # use sdar_lazy() to analyze the (noise-free) synthetic test record # will print a report and give a plot of the final fit # \\donttest{ result <- sdar_lazy(Al_6060_T66, strain, stress) #> Determination of Slope in the Linear Region of a Test Record: #> Random sub-sampling modification of the SDAR-algorithm #>   Random sub-sampling information: #>       121 points of 375 points in the normalized range were used. #>       0 % of sub-sampled normalized ranges passed the data quality checks. #>       100 % of linear regressions passed the fit quality checks. #>       0 % of linear regressions passed all quality checks. #>    #>   Data Quality Metric: Digital Resolution #>     x #>       Relative x-Resolution:   0.333333333333333 #>       % at this resolution:    0 #>       % in zeroth bin:         100 #>       --> pass #>     y #>       Relative y-Resolution:   0.333333333333333 #>       % at this resolution:    0.804289544235925 #>       % in zeroth bin:         99.1957104557641 #>       --> pass #>   Data Quality Metric: Noise #>     x #>       Relative x-Noise:        1.14246654063749e-14 #>       --> pass #>     y #>       Relative y-Noise:        0.0619676935307803 #>       --> pass #>   Fit Quality Metric: Curvature #>     1st Quartile #>       Relative Residual Slope: 0.00086452510296137 #>       Number of Points:        46 #>       --> pass #>     4th Quartile #>       Relative Residual Slope: -0.00711062691360424 #>       Number of Points:        46 #>       --> pass #>   Fit Quality Metric: Fit Range #>       relative fit range:      0.777012483857081 #>       --> pass #>   Un-normalized fit #>       Final Slope:             68997.0676230752 MPa #>       True Intercept:          0.00127687293251233 MPa #>       y-Range:                 10.445556640625 MPa - 71.4129638671875 MPa  # }"},{"path":"https://soylentorange.github.io/sdarr/reference/sdarr-package.html","id":null,"dir":"Reference","previous_headings":"","what":"sdarr: Slope Determination by Analysis of Residuals — sdarr-package","title":"sdarr: Slope Determination by Analysis of Residuals — sdarr-package","text":"Slope Determination Analysis Residuals (SDAR) automated objective linear-fitting mechanical test-data standardized \"ASTM E3076-18\" doi:10.1520/E3076-18 . random sub-sampling modification SDAR algorithm additionally implemented improve processing speed.","code":""},{"path":[]},{"path":"https://soylentorange.github.io/sdarr/reference/sdarr-package.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"sdarr: Slope Determination by Analysis of Residuals — sdarr-package","text":"Maintainer: Robert Wendlandt robert.wendlandt@uksh.de (ORCID) contributors: UKSH [copyright holder, funder]","code":""},{"path":"https://soylentorange.github.io/sdarr/reference/synthesize_test_data.html","id":null,"dir":"Reference","previous_headings":"","what":"Synthesize Test Data — synthesize_test_data","title":"Synthesize Test Data — synthesize_test_data","text":"Synthesize Test Data Ramberg-Osgood equation.","code":""},{"path":"https://soylentorange.github.io/sdarr/reference/synthesize_test_data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Synthesize Test Data — synthesize_test_data","text":"","code":"synthesize_test_data(   slope,   yield.y,   yield.xp = 0.002,   ultimate.y,   ultimate.x,   offset = 0,   toe.start.y = 0,   toe.start.slope = slope,   toe.end.y = 0,   enob.x = 14,   enob.y = 14,   enob.x_FS = 16,   enob.y_FS = 16,   enob.x_noise = 0,   enob.y_noise = 0,   x.name = \"strain\",   y.name = \"stress\",   x.unit = NULL,   y.unit = \"MPa\" )"},{"path":"https://soylentorange.github.io/sdarr/reference/synthesize_test_data.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Synthesize Test Data — synthesize_test_data","text":"slope Slope linear region. yield.y y-value yield point. yield.xp Plastic deformation yield point. Defaults 0.002. ultimate.y Maximum y-value post-linear region. ultimate.x Maximum x-value post-linear region. offset Value y-offset. toe.start.y Intersection toe-region y-axis (adding offset). toe.start.slope Initial slope toe region. toe.end.y End toe region. enob.x Effective number bits synthetic data x-range. determine number points returned data (.e. 2^enob.x). Also used adding quantization noise. enob.y Effective number bits synthetic data y-range. Used adding quantization noise. enob.x_FS Effective number bits full-scale x-range. Using determine level quantization/data-noise x-values. enob.y_FS Effective number bits full-scale y-range. Using determine level quantization/data-noise y-values. enob.x_noise Add noise x-data. Give effective number bits full-scale x-range. enob.y_noise Add noise y-data. Give effective number bits full-scale y-range. x.name Name x-values. Defaults \"strain\". y.name Name y-values. Defaults \"stress\". x.unit Unit x-values. Can NULL. y.unit Unit y-values. Can NULL. Defaults \"MPa\".","code":""},{"path":"https://soylentorange.github.io/sdarr/reference/synthesize_test_data.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Synthesize Test Data — synthesize_test_data","text":"data.frame synthetic data. Units (provided) given variable labels.","code":""},{"path":"https://soylentorange.github.io/sdarr/reference/synthesize_test_data.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Synthesize Test Data — synthesize_test_data","text":"Use Ramberg-Osgood equation formulation Hill create synthetic data similar quasi-static mechanical testing. Parameters K n Ramberg-Osgood equation calculated yield-strength (typically 0.2% offset) second point post-yield region (e.g. point ultimate stress) proposed Hill.","code":""},{"path":"https://soylentorange.github.io/sdarr/reference/synthesize_test_data.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Synthesize Test Data — synthesize_test_data","text":"random values drawn, set random seed beforehand get reproducible results.","code":""},{"path":"https://soylentorange.github.io/sdarr/reference/synthesize_test_data.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Synthesize Test Data — synthesize_test_data","text":"Hill, H. N. (1944). Determination stress-strain relations \"offset\" yield strength values. Aluminum Co America Pittsburgh Pa. Ramberg, W., & Osgood, W. R. (1943). Description Stress-Strain Curves Three Parameters; National Advisory Committee Aeronautics Technical Note. NACA-TN-902.","code":""},{"path":"https://soylentorange.github.io/sdarr/reference/synthesize_test_data.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Synthesize Test Data — synthesize_test_data","text":"","code":"# Synthesize a test record resembling EN AW-6060-T66 Al_6060_T66 <- synthesize_test_data(   slope = 69000,   yield.y = 160,   ultimate.y = 215,   ultimate.x = 0.08 )  plot(   x = Al_6060_T66$strain, y = Al_6060_T66$stress,   type = \"l\",   xlab = \"strain\", ylab = \"stress (in MPa)\" )"},{"path":"https://soylentorange.github.io/sdarr/news/index.html","id":"sdarr-070","dir":"Changelog","previous_headings":"","what":"sdarr 0.7.0","title":"sdarr 0.7.0","text":"remove de-noising features (unstable) update documents renamed sdar.lazy sdar_lazy (line usual function names)","code":""},{"path":"https://soylentorange.github.io/sdarr/news/index.html","id":"sdarr-061","dir":"Changelog","previous_headings":"","what":"sdarr 0.6.1","title":"sdarr 0.6.1","text":"Added article speed-benchmarking.","code":""},{"path":"https://soylentorange.github.io/sdarr/news/index.html","id":"sdarr-060","dir":"Changelog","previous_headings":"","what":"sdarr 0.6.0","title":"sdarr 0.6.0","text":"Major improvement speed sdar.lazy().","code":""},{"path":"https://soylentorange.github.io/sdarr/news/index.html","id":"sdarr-050","dir":"Changelog","previous_headings":"","what":"sdarr 0.5.0","title":"sdarr 0.5.0","text":"Change function-interfaces simplicity. Improvement algorithm synthesizing test data. Fixed typos. Use tidyverse_style Reduced use global variables minimum (?) Modified (lengthy) example sdarr() “donttest”. Added example using sdarr.lazy(). Moved vignette validation (web-) articles. Update documentation. Added NEWS.md file track changes package.","code":""},{"path":"https://soylentorange.github.io/sdarr/news/index.html","id":"sdarr-031","dir":"Changelog","previous_headings":"","what":"sdarr 0.3.1","title":"sdarr 0.3.1","text":"Adjust formatting vignette: Validation","code":""},{"path":"https://soylentorange.github.io/sdarr/news/index.html","id":"sdarr-030","dir":"Changelog","previous_headings":"","what":"sdarr 0.3.0","title":"sdarr 0.3.0","text":"first working version.","code":""}]
