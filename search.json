[{"path":"https://soylentorange.github.io/sdarr/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2023 sdarr authors Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"https://soylentorange.github.io/sdarr/articles/sdarr_validation.html","id":"reference-data-set","dir":"Articles","previous_headings":"","what":"Reference Data Set","title":"Validation against Reference Data Set","text":"plot Reference Data Set (downloading, unpacking labeling) validation Slope Determination Analysis Residuals (SDAR) algorithm given .","code":"# plot of the data E3076_DS1_2018 %>%   {     ggplot(data = ., aes(       x = extensometer, y = force,       color = \"Reference Data Set\\n(E3076_DS1_2018)\"     )) +       geom_line() +       theme_bw() +       labs(         title = \"Plot of the Reference Data Set\",         x = \"extensometer (in mm)\",         y = \"force (in kN)\"       )   } %>%   ggplotly(dynamicTicks = TRUE, originalData = FALSE) %>%   config(displaylogo = FALSE, showSendToCloud = FALSE)"},{"path":"https://soylentorange.github.io/sdarr/articles/sdarr_validation.html","id":"validation-of-the-standard-sdar-algorithm-sdar","dir":"Articles","previous_headings":"","what":"Validation of the standard SDAR-algorithm (sdar)","title":"Validation against Reference Data Set","text":"","code":"# Run the algorithm sdar.results <- E3076_DS1_2018 %>%   sdar(extensometer, force,     plot = FALSE, plotFun = TRUE   ) #> Determination of Slope in the Linear Region of a Test Record: #> SDAR-algorithm #>   Data Quality Metric: Digital Resolution #>     x #>       Relative x-Resolution:   0.666666666666667 #>       % at this resolution:    15.5963302752294 #>       % in zeroth bin:         6.42201834862385 #>       --> pass #>     y #>       Relative y-Resolution:   0.333333333333333 #>       % at this resolution:    4.58715596330275 #>       % in zeroth bin:         90.8256880733945 #>       --> pass #>   Data Quality Metric: Noise #>     x #>       Relative x-Noise:        0.325118923848699 #>       --> pass #>     y #>       Relative y-Noise:        0.14437695453926 #>       --> pass #>   Fit Quality Metric: Curvature #>     1st Quartile #>       Relative Residual Slope: 0.366359693308662 #>       Number of Points:        25 #>       --> pass #>     4th Quartile #>       Relative Residual Slope: 0.205348930211829 #>       Number of Points:        25 #>       --> pass #>   Fit Quality Metric: Fit Range #>       relative fit range:      0.925620787205303 #>       --> pass #>   Un-normalized fit #>       Final Slope:             328.108508087124 kN/mm #>       True Intercept:          -0.0376051859940873 kN #>       y-Range:                 5.456632 kN - 14.35957 kN  # show the plot of the final fit sdar.results$plots$final.fit %>%   {     # tap the environment of the crated plot-function     plot.env <- rlang::fn_env(.)      # get data and labels     plot.data <- plot.env$plot.data     plot.main <- plot.env$plot.main     plot.xlab <- plot.env$plot.xlab     plot.ylab <- plot.env$plot.ylab     y.data.max <- plot.data$y.data %>% max()      # create the ggplot2     plot.data %>% ggplot(aes(       x = x.data,       y = y.data,       color = \"Reference Data Set\\n(E3076_DS1_2018)\"     )) +       geom_line() +       geom_line(         data = plot.data %>%           dplyr::filter(y.fit <= y.data.max),         aes(x = x.data, y = y.fit, color = \"fit (sdar)\")       ) +       theme_bw() +       labs(         title = plot.main,         x = plot.xlab,         y = plot.ylab       )   } %>%   ggplotly(dynamicTicks = TRUE, originalData = FALSE) %>%   config(displaylogo = FALSE, showSendToCloud = FALSE)"},{"path":"https://soylentorange.github.io/sdarr/articles/sdarr_validation.html","id":"validation-result-of-the-standard-sdar-algorithm-sdar","dir":"Articles","previous_headings":"Validation of the standard SDAR-algorithm (sdar)","what":"Validation Result of the standard SDAR-algorithm (sdar)","title":"Validation against Reference Data Set","text":"results analysis using sdar() practically identical results given ASTM E3076-18 perfectly match results NIST Technical Note 2050 E. Lucon (except omitting rounding). stated NIST Technical Note 2050 E. Lucon …small discrepancies likely attributable rounding errors….","code":""},{"path":"https://soylentorange.github.io/sdarr/articles/sdarr_validation.html","id":"validation-of-the-random-sub-sampling-modification-of-the-sdar-algorithm-sdar-lazy","dir":"Articles","previous_headings":"","what":"Validation of the Random Sub-sampling Modification of the SDAR-algorithm (sdar.lazy)","title":"Validation against Reference Data Set","text":"","code":"# Run the algorithm (after setting a random seed) # As the data set is rather short, the algorithm might refuse to use # the random sub-sampling as it will require more computational effort. # Enforce by setting enforce_subsampling = TRUE. set.seed(50041180) sdar.lazy.results <- E3076_DS1_2018 %>%   sdar.lazy(extensometer, force,     # cutoff_probability = 0.5,     # n.fit = 5,     # n.candidates = 5,     # enforce_subsampling = TRUE,     plot = FALSE, plotFun = TRUE   ) #> Determination of Slope in the Linear Region of a Test Record: #> Random sub-sampling modification of the SDAR-algorithm #>   Random sub-sampling information: #>       83 points of 220 points in the normalized range were used. #>       0 % of sub-sampled normalized ranges passed the data quality checks. #>       72 % of linear regressions passed the fit quality checks. #>       0 % of linear regressions passed all quality checks. #>  #>   Data Quality Metric: Digital Resolution #>     x #>       Relative x-Resolution:   0.666666666666667 #>       % at this resolution:    15.5963302752294 #>       % in zeroth bin:         6.42201834862385 #>       --> pass #>     y #>       Relative y-Resolution:   0.333333333333333 #>       % at this resolution:    4.58715596330275 #>       % in zeroth bin:         90.8256880733945 #>       --> pass #>   Data Quality Metric: Noise #>     x #>       Relative x-Noise:        0.325118923848699 #>       --> pass #>     y #>       Relative y-Noise:        0.14437695453926 #>       --> pass #>   Fit Quality Metric: Curvature #>     1st Quartile #>       Relative Residual Slope: 0.385319540604679 #>       Number of Points:        25 #>       --> pass #>     4th Quartile #>       Relative Residual Slope: -0.0711761723808698 #>       Number of Points:        23 #>       --> pass #>   Fit Quality Metric: Fit Range #>       relative fit range:      0.914927986462066 #>       --> pass #>   Un-normalized fit #>       Final Slope:             327.758533115795 kN/mm #>       True Intercept:          -0.0279149776265064 kN #>       y-Range:                 5.551003 kN - 14.55799 kN  # show the plot of the final fit sdar.lazy.results$plots$final.fit %>%   {     # tap the environment of the crated plot-function     plot.env <- rlang::fn_env(.)      # get data and labels     plot.data <- plot.env$plot.data     plot.main <- plot.env$plot.main     plot.xlab <- plot.env$plot.xlab     plot.ylab <- plot.env$plot.ylab     y.data.max <- plot.data$y.data %>% max()      # create the ggplot2     plot.data %>%       ggplot(aes(x = x.data, y = y.data, color = \"Reference Data Set\\n(E3076_DS1_2018)\")) +       geom_line() +       geom_line(         data = plot.data %>%           dplyr::filter(y.fit <= y.data.max),         aes(           x = x.data, y = y.fit,           color = \"fit (sdar.lazy)\"         )       ) +       theme_bw() +       labs(         title = plot.main,         x = plot.xlab,         y = plot.ylab       )   } %>%   ggplotly(dynamicTicks = TRUE, originalData = FALSE) %>%   config(displaylogo = FALSE, showSendToCloud = FALSE)"},{"path":"https://soylentorange.github.io/sdarr/articles/sdarr_validation.html","id":"validation-result-of-the-random-sub-sampling-modification-of-the-sdar-algorithm-sdar-lazy","dir":"Articles","previous_headings":"Validation of the Random Sub-sampling Modification of the SDAR-algorithm (sdar.lazy)","what":"Validation Result of the Random Sub-sampling Modification of the SDAR-algorithm (sdar.lazy)","title":"Validation against Reference Data Set","text":"first glimpse, results analysis using random sub-sampling variant SDAR-algorithm sdar.lazy() identical results given ASTM E3076-18 results NIST Technical Note 2050 E. Lucon (except omitting rounding). However, considering 95% confidence intervals (additionally given result sdar() sdar.lazy()) obtained final fitting standard SDAR-algorithm, results lazy variant well within 95%-CI standard variant. minor difference y-range final fits resulting slightly different final results. Comparing regression curves sdar.lazy() sdar() mechanical data, see practically difference (zoom …lot… see difference).","code":"# plot fit (with 95% CI) and lazy fit against original test record {   # tap the environment of the crated plot-functions   plot.env <- rlang::fn_env(sdar.results$plots$final.fit)   plot.env.lazy <- rlang::fn_env(sdar.lazy.results$plots$final.fit)    # get data and labels   plot.data <- plot.env$plot.data %>%     dplyr::select(x.data, y.data)   plot.main <- plot.env$plot.main   plot.xlab <- plot.env$plot.xlab   plot.ylab <- plot.env$plot.ylab    # get fit ranges   x.lowerBound <- sdar.results$sdar$x.lowerBound   x.upperBound <- sdar.results$sdar$x.upperBound   x.lowerBound.lazy <- sdar.lazy.results$sdar$x.lowerBound   x.upperBound.lazy <- sdar.lazy.results$sdar$x.upperBound    # re-fit for plotting   y.data.prediction <- plot.data %>%     dplyr::filter(dplyr::between(x.data, x.lowerBound, x.upperBound)) %>%     {       data <- .       lm(y.data ~ x.data, data = data) %>%         predict(           newdata = dplyr::bind_rows(             data.frame(x.data = 0),             plot.data %>% dplyr::select(x.data)           ),           interval = \"confidence\"         )     }    y.data.prediction.lazy <- plot.data %>%     dplyr::filter(dplyr::between(       x.data,       x.lowerBound.lazy,       x.upperBound.lazy     )) %>%     {       data <- .       lm(y.data ~ x.data, data = data) %>%         predict(newdata = dplyr::bind_rows(           data.frame(x.data = 0),           plot.data %>%             dplyr::select(x.data)         )) %>%         as.data.frame() %>%         set_names(\"fit.lazy\")     }    # add an empty data point at 0 extension to see the difference in intercept   plot.data <- data.frame(x.data = 0, y.data = NA) %>%     dplyr::bind_rows(plot.data) %>%     dplyr::bind_cols(       y.data.prediction,       y.data.prediction.lazy     )    y.data.max <- plot.data$y.data %>% max(na.rm = TRUE)    ggplot(     data = plot.data,     aes(x = x.data, y = y.data, color = \"Reference Data Set\\n(E3076_DS1_2018)\")   ) +     geom_line() +     geom_line(       data = plot.data %>%         dplyr::filter(dplyr::between(           x.data,           x.lowerBound,           x.upperBound         )),       aes(         x = x.data, y = y.data,         color = \"fit-range (sdar)\"       ),       linewidth = 1.5, alpha = 0.5     ) +     geom_line(       data = plot.data %>%         dplyr::filter(dplyr::between(           x.data,           x.lowerBound.lazy,           x.upperBound.lazy         )),       aes(         x = x.data, y = y.data,         color = \"fit-range (sdar.lazy)\"       ),       linewidth = 1.5, alpha = 0.5     ) +     geom_line(       data = plot.data %>%         dplyr::filter(fit <= y.data.max),       aes(x = x.data, y = fit, color = \"fit (sdar)\")     ) +     geom_ribbon(       data = plot.data %>%         dplyr::filter(fit <= y.data.max),       aes(         x = x.data, y = NULL, ymin = lwr, ymax = upr,         color = \"fit (sdar)\"       ),       linewidth = 0, alpha = 0.25     ) +     geom_line(       data = plot.data %>%         dplyr::filter(fit.lazy <= y.data.max),       aes(x = x.data, y = fit.lazy, color = \"fit (sdar.lazy)\")     ) +     theme_bw() +     labs(       title = \"Final fit (with 95% CI) vs. final lazy fit\",       x = plot.xlab,       y = plot.ylab     ) } %>%   ggplotly(dynamicTicks = TRUE, originalData = FALSE) %>%   config(displaylogo = FALSE, showSendToCloud = FALSE)"},{"path":"https://soylentorange.github.io/sdarr/articles/sdarr_validation.html","id":"conclusions","dir":"Articles","previous_headings":"","what":"Conclusions","title":"Validation against Reference Data Set","text":"Even though benchmarking real validation, results sdar() practically identical results listed ASTM E3076-18 NIST Technical Note 2050 E. Lucon. Considering 95% confidence intervals fitting results, seems true random sub-sampling modification used sdar.lazy().","code":""},{"path":"https://soylentorange.github.io/sdarr/articles/sdarr_validation.html","id":"final-remark","dir":"Articles","previous_headings":"Conclusions","what":"Final Remark","title":"Validation against Reference Data Set","text":"Even though functions within package tested, see remark LICENSE… SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"https://soylentorange.github.io/sdarr/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Robert Wendlandt. Author, maintainer. UKSH. Copyright holder, funder.","code":""},{"path":"https://soylentorange.github.io/sdarr/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Wendlandt R (2023). sdarr: Slope Determination Analysis Residuals. R package version 0.6.0, https://soylentorange.github.io/sdarr/.","code":"@Manual{,   title = {sdarr: Slope Determination by Analysis of Residuals},   author = {Robert Wendlandt},   year = {2023},   note = {R package version 0.6.0},   url = {https://soylentorange.github.io/sdarr/}, }"},{"path":"https://soylentorange.github.io/sdarr/index.html","id":"sdarr","dir":"","previous_headings":"","what":"Slope Determination by Analysis of Residuals","title":"Slope Determination by Analysis of Residuals","text":"sdarr-package provides R implementation algorithm Slope Determination Analysis Residuals (SDAR) standardized ASTM E3076-18. allows automated objective linear-fitting mechanical test-data. See detailed description algorithm NIST Technical Note 2050 E. Lucon Graham & Adler (2011). SDAR-algorithm, implemented sdar(), heavily uses linear regressions, faster version sdar.lazy() implemented, finds optimum region final linear regression random sub-sampling within normalized range test-data.","code":""},{"path":"https://soylentorange.github.io/sdarr/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Slope Determination by Analysis of Residuals","text":"can install latest release version sdarr GitHub : can install development version sdarr GitHub :","code":"# install.packages(\"devtools\") devtools::install_github(\"soylentOrange/sdarr@*release\") # install.packages(\"devtools\") devtools::install_github(\"soylentOrange/sdarr\")"},{"path":[]},{"path":"https://soylentorange.github.io/sdarr/index.html","id":"standard-sdar-algorithm","dir":"","previous_headings":"Examples","what":"Standard SDAR-algorithm","title":"Slope Determination by Analysis of Residuals","text":"basic example using sdar() synthetic data set, based properties aluminium (Al 6060 T66) given Metallic Material Properties Development Standardization (MMPDS) Handbook. toe-region non-zero intercept added make test data less boring. sdar() analyzes data give small report message. confirm Young’s-modulus 68 GPa intercept 10 MPa. make use multi-core processing, configure furrr use multisession strategy.","code":"library(sdarr)  # setup multisession calculations with a maximum of 8 cores # (or however many cores are available...) future::plan(future::multisession,   workers = min(c(parallelly::availableCores(), 8)) )  # Synthesize a test record resembling Al 6060 T66 # (Values from MMPDS Handbook, with a toe region added) Al_6060_T66 <- synthesize_test_data(   slope = 68000, yield.y = 160,   ultimate.y = 215, ultimate.x = 0.091,   offset = 10,   toe.start.y = 3, toe.end.y = 15,   toe.start.slope = 13600 )  # Analyze the test record Al_6060_T66.result <- sdar(Al_6060_T66,   x = strain, y = stress, plotFun = TRUE ) #> Determination of Slope in the Linear Region of a Test Record: #> SDAR-algorithm #>   Data Quality Metric: Digital Resolution #>     x #>       Relative x-Resolution:   0.333333333333333 #>       % at this resolution:    0 #>       % in zeroth bin:         100 #>       --> pass #>     y #>       Relative y-Resolution:   0.333333333333333 #>       % at this resolution:    1.49253731343284 #>       % in zeroth bin:         98.5074626865672 #>       --> pass #>   Data Quality Metric: Noise #>     x #>       Relative x-Noise:        1.12835262887974e-14 #>       --> pass #>     y #>       Relative y-Noise:        0.0630192818713285 #>       --> pass #>   Fit Quality Metric: Curvature #>     1st Quartile #>       Relative Residual Slope: -0.000639630646573031 #>       Number of Points:        40 #>       --> pass #>     4th Quartile #>       Relative Residual Slope: -0.000639630646584453 #>       Number of Points:        40 #>       --> pass #>   Fit Quality Metric: Fit Range #>       relative fit range:      0.795882891125343 #>       --> pass #>   Un-normalized fit #>       Final Slope:             67994.3606141895 MPa #>       True Intercept:          10.0010871775444 MPa #>       y-Range:                 24.7329711914062 MPa - 84.7732543945312 MPa"},{"path":"https://soylentorange.github.io/sdarr/index.html","id":"random-sub-sampling-modification-of-the-sdar-algorithm","dir":"","previous_headings":"Examples","what":"Random sub-sampling modification of the SDAR-algorithm","title":"Slope Determination by Analysis of Residuals","text":"basic example sdar.lazy(), random sub-sampling modification SDAR-algorithm synthetic data set, based properties aluminium (Al 6060 T66) given Metallic Material Properties Development Standardization (MMPDS) Handbook. toe-region non-zero intercept added make test data less boring (see ). sdar.lazy() analyzes data optimum size fitting region via random sub-sampling. give small report message finding optimum fit. confirm Young’s-modulus 68 GPa intercept 10 MPa. synthetic data set noise-free (except quantization-noise), one random sub-sampling run . make use multi-core processing, configure furrr use multisession strategy (see ).","code":"# set a random seed set.seed(50041180)  # Analyze the test record # (with enforced random sub-sampling) Al_6060_T66.result.lazy <- sdar.lazy(Al_6060_T66,   x = strain, y = stress, plot = FALSE,   plotFun = TRUE, n.fit = 1 ) #> Determination of Slope in the Linear Region of a Test Record: #> Random sub-sampling modification of the SDAR-algorithm #>   Random sub-sampling information: #>       124 points of 337 points in the normalized range were used. #>       0 % of sub-sampled normalized ranges passed the data quality checks. #>       100 % of linear regressions passed the fit quality checks. #>       0 % of linear regressions passed all quality checks. #>  #>   Data Quality Metric: Digital Resolution #>     x #>       Relative x-Resolution:   0.333333333333333 #>       % at this resolution:    0 #>       % in zeroth bin:         100 #>       --> pass #>     y #>       Relative y-Resolution:   0.333333333333333 #>       % at this resolution:    1.49253731343284 #>       % in zeroth bin:         98.5074626865672 #>       --> pass #>   Data Quality Metric: Noise #>     x #>       Relative x-Noise:        1.12835262887974e-14 #>       --> pass #>     y #>       Relative y-Noise:        0.0630192818713285 #>       --> pass #>   Fit Quality Metric: Curvature #>     1st Quartile #>       Relative Residual Slope: -0.00051072237819609 #>       Number of Points:        40 #>       --> pass #>     4th Quartile #>       Relative Residual Slope: -0.00180699820639418 #>       Number of Points:        40 #>       --> pass #>   Fit Quality Metric: Fit Range #>       relative fit range:      0.801012891344383 #>       --> pass #>   Un-normalized fit #>       Final Slope:             67993.9223512337 MPa #>       True Intercept:          10.0013157106795 MPa #>       y-Range:                 25.48828125 MPa - 85.14404296875 MPa"},{"path":"https://soylentorange.github.io/sdarr/index.html","id":"plot-functions","dir":"","previous_headings":"Examples","what":"Plot Functions","title":"Slope Determination by Analysis of Residuals","text":"sdar() sdar.lazy() create diagnostic plots throughout calculations, shown requested (.e. set plotFun = TRUE obtaining crated plot-function final fit, plotFun.= TRUE additional diagnostic plots). plot drawn later, can call provided plot-function results, set plotFun = TRUE (plotFun.= TRUE). plot-functions crated, can easily tap environment convert e.g. ggplot2-graphic.","code":"# show plot of final fit using the plot function from the result (see above) Al_6060_T66.result.lazy$plots$final.fit() # satisfy pipe addiction... library(magrittr) # make nice and shiny graphics withh ggplot2... library(ggplot2)  # plot the final fit using ggplot2 Al_6060_T66.result.lazy %>%   {     # tap the environment of the crated plot-function     plot.env <- rlang::fn_env(.$plots$final.fit)      # get data and labels     plot.data <- plot.env$plot.data     plot.main <- plot.env$plot.main     plot.xlab <- plot.env$plot.xlab     plot.ylab <- plot.env$plot.ylab     plot.y.data.max <- plot.data$y.data %>% max()     plot.y.lowerBound <- plot.env$y.lowerBound     plot.y.upperBound <- plot.env$y.upperBound      # create the ggplot2     plot.data %>% ggplot(aes(x = x.data, y = y.data, color = \"Test data\\n(Al 6060 T66)\")) +       geom_line() +       geom_line(         data = plot.data %>%           dplyr::filter(y.fit <= plot.y.data.max),         aes(x = x.data, y = y.fit, color = \"fit (sdar.lazy)\")       ) +       geom_hline(         aes(           color = \"fit range\",           yintercept = plot.y.lowerBound         ),         linetype = \"dashed\",         show.legend = TRUE       ) +       geom_hline(         aes(           color = \"fit range\",           yintercept = plot.y.upperBound         ),         linetype = \"dashed\",         show.legend = TRUE       ) +       theme_bw() +       labs(         title = plot.main,         x = plot.xlab,         y = plot.ylab,         caption = paste0(           \"Result of the random sub-sampling SDAR-algorithm:\\n\\nFinal Slope: \",           round(.$sdar$finalSlope / 1000, 1), \" GPa\\nTrue Offset: \",           round(.$sdar$trueIntercept, 1), \" MPa\\n\\nFit Range: \",           round(plot.y.lowerBound, 1), \" MPa - \",           round(plot.y.upperBound, 1), \" MPa\"         )       )   }"},{"path":"https://soylentorange.github.io/sdarr/index.html","id":"acknowledgements","dir":"","previous_headings":"","what":"Acknowledgements","title":"Slope Determination by Analysis of Residuals","text":"sdarr-package created analysis mechanical test data project LOBio, funded German ministry education research (BMBF) grant number 13XP5174C.","code":""},{"path":"https://soylentorange.github.io/sdarr/reference/pipe.html","id":null,"dir":"Reference","previous_headings":"","what":"Pipe operator — %>%","title":"Pipe operator — %>%","text":"See magrittr::%>% details.","code":""},{"path":"https://soylentorange.github.io/sdarr/reference/pipe.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Pipe operator — %>%","text":"","code":"lhs %>% rhs"},{"path":"https://soylentorange.github.io/sdarr/reference/pipe.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Pipe operator — %>%","text":"lhs value magrittr placeholder. rhs function call using magrittr semantics.","code":""},{"path":"https://soylentorange.github.io/sdarr/reference/pipe.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Pipe operator — %>%","text":"result calling rhs(lhs).","code":""},{"path":"https://soylentorange.github.io/sdarr/reference/sdar.html","id":null,"dir":"Reference","previous_headings":"","what":"SDAR-algorithm — sdar","title":"SDAR-algorithm — sdar","text":"Run SDAR algorithm standardized ASTM E3076-18. use numerous linear regressions (.lm.fit() stats-package) can painfully slow test data high resolution. See article validation package-website information.","code":""},{"path":"https://soylentorange.github.io/sdarr/reference/sdar.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"SDAR-algorithm — sdar","text":"","code":"sdar(data, x, y, verbose = TRUE, plot = TRUE, plotFun = FALSE, ...)"},{"path":"https://soylentorange.github.io/sdarr/reference/sdar.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"SDAR-algorithm — sdar","text":"data Data record analyze. Labels data columns used units. x, y <tidy-select> Columns x y within data. verbose, plot Give summarizing report / show plot final fit. plotFun Set TRUE get plot-function final fit results later use. ... <dynamic-dots> Pass parameters downstream functions: set verbose., plot.plotFun.TRUE get additional diagnostic information processing data.","code":""},{"path":"https://soylentorange.github.io/sdarr/reference/sdar.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"SDAR-algorithm — sdar","text":"list containing data.frame results final fit, lists quality- fit-metrics, list containing crated plot-function(s) (plotFun = TRUE).","code":""},{"path":"https://soylentorange.github.io/sdarr/reference/sdar.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"SDAR-algorithm — sdar","text":"function can use parallel processing via furrr-package. use feature, set plan default sequential strategy beforehand.","code":""},{"path":"https://soylentorange.github.io/sdarr/reference/sdar.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"SDAR-algorithm — sdar","text":"Lucon, E. (2019). Use validation slope determination analysis residuals (SDAR) algorithm (NIST TN 2050; p. NIST TN 2050). National Institute Standards Technology. https://doi.org/10.6028/NIST.TN.2050 Standard Practice Determination Slope Linear Region Test Record (ASTM E3076-18). (2018). https://doi.org/10.1520/E3076-18 Graham, S., & Adler, M. (2011). Determining Slope Quality Fit Linear Part Test Record. Journal Testing Evaluation - J TEST EVAL, 39. https://doi.org/10.1520/JTE103038","code":""},{"path":[]},{"path":"https://soylentorange.github.io/sdarr/reference/sdar.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"SDAR-algorithm — sdar","text":"","code":"# Synthesize a test record resembling Al 6060 T66 # (Values according to Metallic Material Properties # Development and Standardization (MMPDS) Handbook). # Explicitly set names to \"strain\" and \"stress\", # set effective number of bits in the x-data to 12 # to limit the number of data points.  Al_6060_T66 <- synthesize_test_data(   slope = 68000,   yield.y = 160,   ultimate.y = 215,   ultimate.x = 0.091,   x.name = \"strain\",   y.name = \"stress\",   toe.start.y = 3, toe.end.y = 10,   toe.start.slope = 13600,   enob.x = 12 )   # use sdar() to analyze the synthetic test record # will print a report and give a plot of the final fit # \\donttest{ result <- sdar(Al_6060_T66, strain, stress) #> Determination of Slope in the Linear Region of a Test Record: #> SDAR-algorithm #>   Data Quality Metric: Digital Resolution #>     x #>       Relative x-Resolution:   0.333333333333333 #>       % at this resolution:    0 #>       % in zeroth bin:         100 #>       --> pass #>     y #>       Relative y-Resolution:   0.333333333333333 #>       % at this resolution:    16.6666666666667 #>       % in zeroth bin:         76.1904761904762 #>       --> pass #>   Data Quality Metric: Noise #>     x #>       Relative x-Noise:        1.05145837269219e-14 #>       --> pass #>     y #>       Relative y-Noise:        0.282264289460331 #>       --> pass #>   Fit Quality Metric: Curvature #>     1st Quartile #>       Relative Residual Slope: 0.00112552789229047 #>       Number of Points:        12 #>       --> pass #>     4th Quartile #>       Relative Residual Slope: 0.0011255278922861 #>       Number of Points:        12 #>       --> pass #>   Fit Quality Metric: Fit Range #>       relative fit range:      0.708957528957529 #>       --> pass #>   Un-normalized fit #>       Final Slope:             67996.3463148015 MPa #>       True Intercept:          0.00213165706662455 MPa #>       y-Range:                 9.06768798828125 MPa - 77.0425415039062 MPa  # }"},{"path":"https://soylentorange.github.io/sdarr/reference/sdar.lazy.html","id":null,"dir":"Reference","previous_headings":"","what":"Random sub-sampling variant of the SDAR-algorithm — sdar.lazy","title":"Random sub-sampling variant of the SDAR-algorithm — sdar.lazy","text":"Run random sub-sampling modification SDAR algorithm originally standardized ASTM E3076-18. original version uses numerous linear regressions (.lm.fit() stats-package), can painfully slow test data high resolution. lazy variant algorithm use several random sub-samples data find best estimate fit-range within data. Additionally, test data can de-noised using Variational Mode Decomposition case initial data quality checks failed (highly experimental). See article validation package-website information.","code":""},{"path":"https://soylentorange.github.io/sdarr/reference/sdar.lazy.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Random sub-sampling variant of the SDAR-algorithm — sdar.lazy","text":"","code":"sdar.lazy(   data,   x,   y,   verbose = TRUE,   plot = TRUE,   plotFun = FALSE,   n.fit = 5,   cutoff_probability = 0.5,   ... )"},{"path":"https://soylentorange.github.io/sdarr/reference/sdar.lazy.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Random sub-sampling variant of the SDAR-algorithm — sdar.lazy","text":"data Data record analyze. Labels data columns used units. x, y <tidy-select> Columns x y within data. verbose, plot Give summarizing report / show plot final fit. plotFun Set TRUE get plot-function final fit results later use. n.fit Repetitions random sub-sampling fitting. cutoff_probability Cut-probability estimating optimum size sub-sampled data range via logistic regression. ... <dynamic-dots> Pass parameters downstream functions: set verbose., plot.plotFun.TRUE get additional diagnostic information processing data. Set enforce_subsampling TRUE run random sub-sampling algorithm even though might slower standard SDAR-algorithm.","code":""},{"path":"https://soylentorange.github.io/sdarr/reference/sdar.lazy.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Random sub-sampling variant of the SDAR-algorithm — sdar.lazy","text":"list containing data.frame results final fit, lists quality- fit-metrics, list containing crated plot-function(s) (plotFun = TRUE , diagnostic plots plotFun.= TRUE).","code":""},{"path":"https://soylentorange.github.io/sdarr/reference/sdar.lazy.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Random sub-sampling variant of the SDAR-algorithm — sdar.lazy","text":"function can use parallel processing via furrr-package. use feature, set plan default sequential strategy beforehand. Also, random values drawn, set random seed beforehand get reproducible results.","code":""},{"path":"https://soylentorange.github.io/sdarr/reference/sdar.lazy.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Random sub-sampling variant of the SDAR-algorithm — sdar.lazy","text":"Lucon, E. (2019). Use validation slope determination analysis residuals (SDAR) algorithm (NIST TN 2050; p. NIST TN 2050). National Institute Standards Technology. https://doi.org/10.6028/NIST.TN.2050 Standard Practice Determination Slope Linear Region Test Record (ASTM E3076-18). (2018). https://doi.org/10.1520/E3076-18 Graham, S., & Adler, M. (2011). Determining Slope Quality Fit Linear Part Test Record. Journal Testing Evaluation - J TEST EVAL, 39. https://doi.org/10.1520/JTE103038 Dragomiretskiy, K., & Zosso, D. (2014). Variational Mode Decomposition. IEEE Transactions Signal Processing, 62(3), 531–544. https://doi.org/10.1109/TSP.2013.2288675","code":""},{"path":[]},{"path":"https://soylentorange.github.io/sdarr/reference/sdar.lazy.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Random sub-sampling variant of the SDAR-algorithm — sdar.lazy","text":"","code":"# Synthesize a test record resembling Al 6060 T66 # (Values according to Metallic Material Properties # Development and Standardization (MMPDS) Handbook). # Explicitly set names to \"strain\" and \"stress\".  Al_6060_T66 <- synthesize_test_data(   slope = 68000,   yield.y = 160,   ultimate.y = 215,   ultimate.x = 0.091,   x.name = \"strain\",   y.name = \"stress\",   toe.start.y = 3, toe.end.y = 10,   toe.start.slope = 13600 )   # use sdar.lazy() to analyze the (noise-free) synthetic test record # will print a report and give a plot of the final fit # \\donttest{ result <- sdar.lazy(Al_6060_T66, strain, stress) #> Determination of Slope in the Linear Region of a Test Record: #> Random sub-sampling modification of the SDAR-algorithm #>   Random sub-sampling information: #>       117 points of 336 points in the normalized range were used. #>       0 % of sub-sampled normalized ranges passed the data quality checks. #>       100 % of linear regressions passed the fit quality checks. #>       0 % of linear regressions passed all quality checks. #>    #>   Data Quality Metric: Digital Resolution #>     x #>       Relative x-Resolution:   0.333333333333333 #>       % at this resolution:    0 #>       % in zeroth bin:         100 #>       --> pass #>     y #>       Relative y-Resolution:   0.666666666666667 #>       % at this resolution:    0.29940119760479 #>       % in zeroth bin:         99.7005988023952 #>       --> pass #>   Data Quality Metric: Noise #>     x #>       Relative x-Noise:        8.92753747230055e-15 #>       --> pass #>     y #>       Relative y-Noise:        0.067704464397069 #>       --> pass #>   Fit Quality Metric: Curvature #>     1st Quartile #>       Relative Residual Slope: 0.000298960194124623 #>       Number of Points:        41 #>       --> pass #>     4th Quartile #>       Relative Residual Slope: -0.00599645720960068 #>       Number of Points:        41 #>       --> pass #>   Fit Quality Metric: Fit Range #>       relative fit range:      0.789055374592834 #>       --> pass #>   Un-normalized fit #>       Final Slope:             67997.6625916067 MPa #>       True Intercept:          0.00108924481356221 MPa #>       y-Range:                 11.705322265625 MPa - 72.1347045898438 MPa  # }"},{"path":"https://soylentorange.github.io/sdarr/reference/sdarr-package.html","id":null,"dir":"Reference","previous_headings":"","what":"sdarr: Slope Determination by Analysis of Residuals — sdarr-package","title":"sdarr: Slope Determination by Analysis of Residuals — sdarr-package","text":"Slope Determination Analysis Residuals (SDAR) automated objective linear-fitting mechanical test-data (see: standard ASTM E3076-18 doi:10.1520/E3076-18  detailed description E. Lucon (2019) doi:10.6028/NIST.TN.2050 ). SDAR-algorithm heavily uses linear regressions, faster version additionally available find optimum region (one) final linear regression random sub-sampling within normalized range test-data.","code":""},{"path":[]},{"path":"https://soylentorange.github.io/sdarr/reference/sdarr-package.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"sdarr: Slope Determination by Analysis of Residuals — sdarr-package","text":"Maintainer: Robert Wendlandt robert.wendlandt@uksh.de (ORCID) contributors: UKSH [copyright holder, funder]","code":""},{"path":"https://soylentorange.github.io/sdarr/reference/synthesize_test_data.html","id":null,"dir":"Reference","previous_headings":"","what":"Synthesize Test Data — synthesize_test_data","title":"Synthesize Test Data — synthesize_test_data","text":"Synthesize Test Data Ramberg-Osgood equation.","code":""},{"path":"https://soylentorange.github.io/sdarr/reference/synthesize_test_data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Synthesize Test Data — synthesize_test_data","text":"","code":"synthesize_test_data(   slope,   yield.y,   yield.xp = 0.002,   ultimate.y,   ultimate.x,   offset = 0,   toe.start.y = 0,   toe.start.slope = slope,   toe.end.y = 0,   enob.x = 14,   enob.y = 14,   enob.x_FS = 16,   enob.y_FS = 16,   enob.x_noise = 0,   enob.y_noise = 0,   x.name = \"strain\",   y.name = \"stress\",   x.unit = NULL,   y.unit = \"MPa\" )"},{"path":"https://soylentorange.github.io/sdarr/reference/synthesize_test_data.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Synthesize Test Data — synthesize_test_data","text":"slope Slope linear region. yield.y y-value yield point. yield.xp Plastic deformation yield point. Defaults 0.002. ultimate.y Maximum y-value post-linear region. ultimate.x Maximum x-value post-linear region. offset Value y-offset. toe.start.y Intersection toe-region y-axis (adding offset). toe.start.slope Initial slope toe region. toe.end.y End toe region. enob.x Effective number bits synthetic data x-range. determine number points returned data (.e. 2^enob.x). Also used adding quantization noise. enob.y Effective number bits synthetic data y-range. Used adding quantization noise. enob.x_FS Effective number bits full-scale x-range. Using determine level quantization/data-noise x-values. enob.y_FS Effective number bits full-scale y-range. Using determine level quantization/data-noise y-values. enob.x_noise Add noise x-data. Give effective number bits full-scale x-range. enob.y_noise Add noise y-data. Give effective number bits full-scale y-range. x.name Name x-values. Defaults \"strain\". y.name Name y-values. Defaults \"stress\". x.unit Unit x-values. Can NULL. y.unit Unit y-values. Can NULL. Defaults \"MPa\".","code":""},{"path":"https://soylentorange.github.io/sdarr/reference/synthesize_test_data.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Synthesize Test Data — synthesize_test_data","text":"data.frame synthetic data. Units (provided) given variable labels.","code":""},{"path":"https://soylentorange.github.io/sdarr/reference/synthesize_test_data.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Synthesize Test Data — synthesize_test_data","text":"Use Ramberg-Osgood equation formulation Hill create synthetic data similar quasi-static mechanical testing. Parameters K n Ramberg-Osgood equation calculated yield-strength (typically 0.2% offset) second point post-yield region (e.g. point ultimate stress) proposed Hill.","code":""},{"path":"https://soylentorange.github.io/sdarr/reference/synthesize_test_data.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Synthesize Test Data — synthesize_test_data","text":"random values drawn, set random seed beforehand get reproducible results.","code":""},{"path":"https://soylentorange.github.io/sdarr/reference/synthesize_test_data.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Synthesize Test Data — synthesize_test_data","text":"Hill, H. N. (1944). Determination stress-strain relations \"offset\" yield strength values. Aluminum Co America Pittsburgh Pa. Ramberg, W., & Osgood, W. R. (1943). Description Stress-Strain Curves Three Parameters; National Advisory Committee Aeronautics Technical Note. NACA-TN-902. Rice, R. C., Jackson, J. L., Bakuckas, J., & Thompson, S. (2003). Metallic Materials Properties Development Standardization (MMPDS) (DOT/FAA/AR-MMPDS-01).","code":""},{"path":"https://soylentorange.github.io/sdarr/reference/synthesize_test_data.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Synthesize Test Data — synthesize_test_data","text":"","code":"# Synthesize a test record resembling Al 6060 T66 # (Values according to Metallic Material Properties # Development and Standardization (MMPDS) Handbook) Al_6060_T66 <- synthesize_test_data(   slope = 68000,   yield.y = 160,   ultimate.y = 215,   ultimate.x = 0.091 )  plot(   x = Al_6060_T66$strain, y = Al_6060_T66$stress,   type = \"l\",   xlab = \"strain\", ylab = \"stress (in MPa)\" )"},{"path":"https://soylentorange.github.io/sdarr/news/index.html","id":"sdarr-060","dir":"Changelog","previous_headings":"","what":"sdarr 0.6.0","title":"sdarr 0.6.0","text":"Major improvement speed sdar.lazy().","code":""},{"path":"https://soylentorange.github.io/sdarr/news/index.html","id":"sdarr-050","dir":"Changelog","previous_headings":"","what":"sdarr 0.5.0","title":"sdarr 0.5.0","text":"Change function-interfaces simplicity. Improvement algorithm synthesizing test data. Fixed typos. Use tidyverse_style Reduced use global variables minimum (?) Modified (lengthy) example sdarr() “donttest”. Added example using sdarr.lazy(). Moved vignette validation (web-) articles. Update documentation. Added NEWS.md file track changes package.","code":""},{"path":"https://soylentorange.github.io/sdarr/news/index.html","id":"sdarr-031","dir":"Changelog","previous_headings":"","what":"sdarr 0.3.1","title":"sdarr 0.3.1","text":"Adjust formatting vignette: Validation","code":""},{"path":"https://soylentorange.github.io/sdarr/news/index.html","id":"sdarr-030","dir":"Changelog","previous_headings":"","what":"sdarr 0.3.0","title":"sdarr 0.3.0","text":"first working version.","code":""}]
